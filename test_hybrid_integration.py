#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –≤ bot_handler.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from modules.bot_handler import is_legal_question, get_rejection_message

def test_hybrid_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞."""
    print("üî¨ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ì–ò–ë–†–ò–î–ù–û–ì–û –§–ò–õ–¨–¢–†–ê")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        ("–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∏—Å–∫ –≤ —Å—É–¥?", True, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π"),
        ("–ú–µ–Ω—è –∫–∏–Ω—É–ª–∏ —Å –¥–µ–Ω—å–≥–∞–º–∏", True, "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π"),
        ("–ß—Ç–æ —Ç–∞–∫–æ–µ —ç—Å—Ç–æ–ø–ø–µ–ª—å?", True, "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Ä–º–∏–Ω"),
        ("Habeas corpus —á—Ç–æ —ç—Ç–æ?", True, "–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —Ç–µ—Ä–º–∏–Ω"),
        ("–ñ–∏–ª–∏—â–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –í–∏—Ç–µ–±—Å–∫–µ", True, "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å"),
        ("–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â?", False, "–Ω–µ—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π"),
        ("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", False, "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω"),
        ("–°—É–¥ –ø—Ä–∏—Å—è–∂–Ω—ã—Ö –≤ –∫–∏–Ω–æ", False, "–ª–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ"),
    ]
    
    print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("-" * 80)
    print(f"{'–í–æ–ø—Ä–æ—Å':<40} {'–û–∂–∏–¥.':<6} {'–†–µ–∑—É–ª—å—Ç–∞—Ç':<8} {'–ë–∞–ª–ª':<8} {'–û–±—ä—è—Å–Ω–µ–Ω–∏–µ':<30}")
    print("-" * 80)
    
    correct = 0
    total = len(test_cases)
    
    for question, expected, category in test_cases:
        try:
            is_legal, score, explanation = is_legal_question(question)
            
            result_icon = "‚úÖ" if is_legal == expected else "‚ùå"
            status = "–Æ–†" if is_legal else "–ù–ï –Æ–†"
            expected_status = "–Æ–†" if expected else "–ù–ï –Æ–†"
            
            # –°–æ–∫—Ä–∞—â–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
            short_explanation = explanation[:28] + "..." if len(explanation) > 28 else explanation
            
            print(f"{result_icon} {question[:38]:<38} {expected_status:<6} {status:<8} {score:<8.3f} {short_explanation}")
            
            if is_legal == expected:
                correct += 1
                
        except Exception as e:
            print(f"‚ùå {question[:38]:<38} –û–®–ò–ë–ö–ê: {e}")
    
    print("-" * 80)
    accuracy = correct / total * 100
    print(f"üìà –ò–¢–û–ì–û–í–ê–Ø –¢–û–ß–ù–û–°–¢–¨: {correct}/{total} ({accuracy:.1f}%)")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
    print(f"\nüìù –°–û–û–ë–©–ï–ù–ò–ï –û–ë –û–¢–ö–õ–û–ù–ï–ù–ò–ò:")
    try:
        rejection_msg = get_rejection_message()
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: {rejection_msg[:100]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    print(f"\nüéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê:")
    if accuracy >= 90:
        print("üéâ –û–¢–õ–ò–ß–ù–û! –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ")
    elif accuracy >= 80:
        print("üëç –•–û–†–û–®–û! –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
    elif accuracy >= 70:
        print("‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
    else:
        print("‚ùå –ü–õ–û–•–û! –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞")
    
    return accuracy

if __name__ == "__main__":
    try:
        accuracy = test_hybrid_integration()
        print(f"\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù! –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%")
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc() 