# ModSecurity configuration for Nginx WAF
load_module modules/ngx_http_modsecurity_module.so;

events {
    worker_connections 1024;
}

http {
    # ModSecurity
    modsecurity on;
    modsecurity_rules_file /etc/nginx/modsec/main.conf;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; frame-ancestors 'none';" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Hide server information
    server_tokens off;
    more_clear_headers Server;

    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=global:10m rate=30r/s;
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

    # IP blacklist
    geo $blacklist {
        default 0;
        # Add malicious IPs here
        # 192.168.1.100 1;
    }

    # Bot detection
    map $http_user_agent $blocked_agent {
        default 0;
        ~*(bot|crawler|spider|scraper|wget|curl) 1;
        ~*(sqlmap|nmap|masscan|nikto|dirb|dirbuster) 1;
        ~*(python-requests|python-urllib|libwww-perl) 1;
    }

    # Country blocking (optional)
    geoip2 /usr/share/GeoIP/GeoLite2-Country.mmdb {
        $geoip2_data_country_code country iso_code;
        $geoip2_data_country_name country names en;
    }

    map $geoip2_data_country_code $blocked_country {
        default 0;
        # Add blocked countries here
        # CN 1;
        # RU 1;
    }

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_stapling on;
    ssl_stapling_verify on;

    # DDoS protection
    limit_req_status 429;
    limit_conn_status 429;

    upstream legal_bot_backend {
        least_conn;
        server legal-bot:5000 max_fails=3 fail_timeout=30s;
        keepalive 32;
    }

    server {
        listen 80;
        server_name _;
        return 301 https://$server_name$request_uri;
    }

    server {
        listen 443 ssl http2;
        server_name _;

        # SSL certificates
        ssl_certificate /etc/nginx/ssl/fullchain.pem;
        ssl_certificate_key /etc/nginx/ssl/privkey.pem;
        ssl_trusted_certificate /etc/nginx/ssl/chain.pem;

        # Security checks
        if ($blacklist) {
            return 403;
        }

        if ($blocked_agent) {
            return 403;
        }

        if ($blocked_country) {
            return 403;
        }

        # Global rate limiting
        limit_req zone=global burst=50 nodelay;
        limit_conn conn_limit_per_ip 20;

        # Security headers for this server
        add_header X-Robots-Tag "noindex, nofollow, nosnippet, noarchive" always;

        # Block common attack patterns
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }

        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Block access to sensitive files
        location ~* \.(htaccess|htpasswd|ini|log|sh|sql|conf|bak|backup|swp|tmp)$ {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Block SQL injection attempts
        location ~* (union.*select|insert.*into|delete.*from|drop.*table) {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Block XSS attempts
        location ~* (<script|javascript:|vbscript:|onload|onerror|onclick) {
            deny all;
            access_log off;
            log_not_found off;
        }

        # Authentication endpoints with strict rate limiting
        location /api/auth/ {
            limit_req zone=login burst=3 nodelay;
            
            # Additional security for auth endpoints
            if ($request_method !~ ^(POST|GET)$ ) {
                return 405;
            }
            
            proxy_pass http://legal_bot_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Timeout settings for auth
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
        }

        # API endpoints
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            
            # Block common attack methods
            if ($request_method !~ ^(GET|POST|PUT|DELETE|OPTIONS)$ ) {
                return 405;
            }
            
            proxy_pass http://legal_bot_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Security headers for API
            add_header X-Content-Type-Options nosniff always;
            add_header X-Frame-Options DENY always;
        }

        # Health check (no rate limiting)
        location /health {
            access_log off;
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            proxy_pass http://legal_bot_backend;
            proxy_set_header Host $host;
        }

        # Static files with caching
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            access_log off;
            
            # Security for static files
            add_header X-Content-Type-Options nosniff always;
            
            proxy_pass http://legal_bot_backend;
            proxy_set_header Host $host;
        }

        # Main application
        location / {
            # Method filtering
            if ($request_method !~ ^(GET|POST|HEAD|OPTIONS)$ ) {
                return 405;
            }
            
            proxy_pass http://legal_bot_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            
            # Buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            
            # Timeouts
            proxy_connect_timeout 5s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Custom error pages
        error_page 400 /error/400.html;
        error_page 401 /error/401.html;
        error_page 403 /error/403.html;
        error_page 404 /error/404.html;
        error_page 429 /error/429.html;
        error_page 500 502 503 504 /error/50x.html;

        location = /error/400.html {
            root /usr/share/nginx/html;
            internal;
        }

        location = /error/401.html {
            root /usr/share/nginx/html;
            internal;
        }

        location = /error/403.html {
            root /usr/share/nginx/html;
            internal;
        }

        location = /error/404.html {
            root /usr/share/nginx/html;
            internal;
        }

        location = /error/429.html {
            root /usr/share/nginx/html;
            internal;
        }

        location = /error/50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }
} 