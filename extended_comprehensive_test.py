#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π comprehensive —Ç–µ—Å—Ç –¥–ª—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
–í–∫–ª—é—á–∞–µ—Ç 50+ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from modules.question_filter import QuestionFilter
from modules.improved_question_filter import ImprovedQuestionFilter
from modules.ml_question_filter import MLQuestionFilter
from modules.hybrid_question_filter import HybridQuestionFilter

class ExtendedComprehensiveTest:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        print("üöÄ –†–ê–°–®–ò–†–ï–ù–ù–´–ô COMPREHENSIVE –¢–ï–°–¢")
        print("=" * 70)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        self.filters = {}
        
        try:
            self.filters['–ë–∞–∑–æ–≤—ã–π'] = QuestionFilter()
            print("‚úÖ –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
        
        try:
            self.filters['–£–ª—É—á—à–µ–Ω–Ω—ã–π'] = ImprovedQuestionFilter()
            print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
        
        try:
            self.filters['ML'] = MLQuestionFilter()
            print("‚úÖ ML-—Ñ–∏–ª—å—Ç—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML-—Ñ–∏–ª—å—Ç—Ä–∞: {e}")
        
        try:
            self.filters['–ì–∏–±—Ä–∏–¥–Ω—ã–π'] = HybridQuestionFilter()
            print("‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
        
        print(f"\nüìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.filters)} —Ñ–∏–ª—å—Ç—Ä–æ–≤")
    
    def get_extended_test_cases(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤."""
        return [
            # === –†–ê–ó–ì–û–í–û–†–ù–´–ï –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ï –í–´–†–ê–ñ–ï–ù–ò–Ø ===
            ("–ú–µ–Ω—è –∫–∏–Ω—É–ª–∏ —Å –¥–µ–Ω—å–≥–∞–º–∏, —á—Ç–æ –¥–µ–ª–∞—Ç—å?", True, "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π"),
            ("–û–±–º–∞–Ω—É–ª–∏ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã", True, "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π"),
            ("–£–≤–æ–ª–∏–ª–∏ –Ω–µ–∑–∞–∫–æ–Ω–Ω–æ —Å —Ä–∞–±–æ—Ç—ã", True, "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π"),
            ("–†–∞–∑–≤–µ–ª–∏ –Ω–∞ –¥–µ–Ω—å–≥–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", True, "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π"),
            ("–ö–∏–¥–∞–ª–æ–≤–æ —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º", True, "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π"),
            ("–û–±–ª–∞–ø–æ—à–∏–ª–∏ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –¥–æ–º–∞", True, "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π"),
            ("–ù–∞–¥—É–ª–∏ —Å –∫—Ä–µ–¥–∏—Ç–æ–º –≤ –±–∞–Ω–∫–µ", True, "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π"),
            ("–ü–æ–¥—Å—Ç–∞–≤–∏–ª–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ", True, "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π"),
            ("–ù–∞–µ—Ö–∞–ª–∏ —Å–æ—Å–µ–¥–∏ –∏–∑-–∑–∞ –∑–∞–±–æ—Ä–∞", True, "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π"),
            ("–ü—Ä–æ–∫–∏–Ω—É–ª–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π", True, "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π"),
            
            # === –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ï –¢–ï–†–ú–ò–ù–´ ===
            ("–≠—Å—Ç–æ–ø–ø–µ–ª—å –≤ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –ø—Ä–∞–≤–µ", True, "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"),
            ("–°—É–±—Ä–æ–≥–∞—Ü–∏—è –≤ —Å—Ç—Ä–∞—Ö–æ–≤–æ–º –ø—Ä–∞–≤–µ", True, "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"),
            ("–í–∏–Ω–¥–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∏—Å–∫ –∫ —Ç—Ä–µ—Ç—å–µ–º—É –ª–∏—Ü—É", True, "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"),
            ("–°—É–±—Å–∏–¥–∏–∞—Ä–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —É—á—Ä–µ–¥–∏—Ç–µ–ª–µ–π", True, "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"),
            ("–ù–µ–≥–∞—Ç–æ—Ä–Ω—ã–π –∏—Å–∫ –ø—Ä–æ—Ç–∏–≤ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞", True, "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"),
            ("–†–µ—Å—Ç–∏—Ç—É—Ü–∏—è –ø—Ä–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏", True, "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"),
            ("–¶–µ—Å—Å–∏—è –¥–µ–±–∏—Ç–æ—Ä—Å–∫–æ–π –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏", True, "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"),
            ("–ù–æ–≤–∞—Ü–∏—è –¥–æ–≥–æ–≤–æ—Ä–Ω—ã—Ö –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤", True, "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"),
            ("–î–µ–ª–∏–∫—Ç–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–∏—Ü–∞", True, "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"),
            ("–§–∏–¥—É—Ü–∏–∞—Ä–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞", True, "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"),
            
            # === –ò–ù–û–°–¢–†–ê–ù–ù–´–ï –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ï –¢–ï–†–ú–ò–ù–´ ===
            ("–ß—Ç–æ —Ç–∞–∫–æ–µ habeas corpus?", True, "–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π"),
            ("–ü—Ä–∏–Ω—Ü–∏–ø res judicata –≤ —Å—É–¥–æ–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ", True, "–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π"),
            ("–î–æ–∫—Ç—Ä–∏–Ω–∞ ultra vires –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º –ø—Ä–∞–≤–µ", True, "–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π"),
            ("–ü—Ä–∞–≤–∏–ª–æ de minimis –≤ –∞–Ω—Ç–∏–º–æ–Ω–æ–ø–æ–ª—å–Ω–æ–º –ø—Ä–∞–≤–µ", True, "–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π"),
            ("–ü—Ä–µ–∑—É–º–ø—Ü–∏—è mens rea –≤ —É–≥–æ–ª–æ–≤–Ω–æ–º –ø—Ä–∞–≤–µ", True, "–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π"),
            ("–ü—Ä–∏–Ω—Ü–∏–ø pacta sunt servanda", True, "–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π"),
            ("–î–æ–∫—Ç—Ä–∏–Ω–∞ forum non conveniens", True, "–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π"),
            ("–ü—Ä–∞–≤–∏–ª–æ ejusdem generis –≤ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–∏", True, "–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π"),
            
            # === –ö–û–ù–¢–ï–ö–°–¢–ù–´–ï –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´ ===
            ("–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ —É –º–µ–Ω—è –µ—Å—Ç—å?", True, "–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π"),
            ("–ß—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å –≤ —Ç–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?", True, "–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π"),
            ("–ú–æ–≥—É –ª–∏ —è –ø–æ–¥–∞—Ç—å –≤ —Å—É–¥?", True, "–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π"),
            ("–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Å—É–¥–∞?", True, "–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π"),
            ("–ö–∞–∫–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞?", True, "–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π"),
            ("–ö–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã?", True, "–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π"),
            ("–ß—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –∑–∞–∫–æ–Ω –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É?", True, "–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π"),
            ("–ö–∞–∫–∏–µ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–µ—à–µ–Ω–∏—è?", True, "–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π"),
            
            # === –†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ï –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´ ===
            ("–ñ–∏–ª–∏—â–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –í–∏—Ç–µ–±—Å–∫–µ", True, "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π"),
            ("–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã –≤ –ì–æ–º–µ–ª–µ", True, "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π"),
            ("–ó–µ–º–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –ú–∏–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏", True, "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π"),
            ("–ù–∞–ª–æ–≥–æ–≤—ã–µ —Å–ø–æ—Ä—ã –≤ –ë—Ä–µ—Å—Ç–µ", True, "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π"),
            ("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–æ–Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ –ú–æ–≥–∏–ª–µ–≤–µ", True, "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π"),
            ("–°–µ–º–µ–π–Ω—ã–µ —Å–ø–æ—Ä—ã –≤ –ì—Ä–æ–¥–Ω–æ", True, "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π"),
            
            # === –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´ ===
            ("–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∏—Å–∫ –≤ —Å—É–¥ –≤ –ë–µ–ª–∞—Ä—É—Å–∏?", True, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"),
            ("–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ä–∞–∑–≤–æ–¥–∞?", True, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"),
            ("–ü—Ä–∞–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –≤ –ë–µ–ª–∞—Ä—É—Å–∏", True, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"),
            ("–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ?", True, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"),
            ("–¢—Ä—É–¥–æ–≤—ã–µ –ø—Ä–∞–≤–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞", True, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"),
            ("–ó–∞—â–∏—Ç–∞ –ø—Ä–∞–≤ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏", True, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"),
            ("–ê–ª–∏–º–µ–Ω—Ç–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞", True, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"),
            ("–î–æ–≥–æ–≤–æ—Ä –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", True, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"),
            ("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", True, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"),
            ("–£–≥–æ–ª–æ–≤–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö", True, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"),
            
            # === –ù–ï–Æ–†–ò–î–ò–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´ ===
            ("–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â?", False, "–∫—É–ª–∏–Ω–∞—Ä–∏—è"),
            ("–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞?", False, "–ø–æ–≥–æ–¥–∞"),
            ("–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Windows?", False, "—Ç–µ—Ö–Ω–∏–∫–∞"),
            ("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", False, "IT"),
            ("–°—É–¥ –ø—Ä–∏—Å—è–∂–Ω—ã—Ö –≤ –∫–∏–Ω–æ", False, "–∫–∏–Ω–æ"),
            ("–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã?", False, "–æ–±—â–∏–π"),
            ("–ö–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —Ü–µ–Ω—Ç—Ä–∞?", False, "—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç"),
            ("–õ—É—á—à–∏–π —Ä–µ—Ü–µ–ø—Ç –ø–∏—Ü—Ü—ã", False, "–∫—É–ª–∏–Ω–∞—Ä–∏—è"),
            ("–ö—É—Ä—Å –¥–æ–ª–ª–∞—Ä–∞ —Å–µ–≥–æ–¥–Ω—è", False, "—Ñ–∏–Ω–∞–Ω—Å—ã"),
            ("–ö–∞–∫ –ø–æ—Ö—É–¥–µ—Ç—å –±—ã—Å—Ç—Ä–æ?", False, "–∑–¥–æ—Ä–æ–≤—å–µ"),
            ("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞ –¥–æ–º–∞", False, "—Ç–µ—Ö–Ω–∏–∫–∞"),
            ("–ì–¥–µ –∫—É–ø–∏—Ç—å —Ü–≤–µ—Ç—ã?", False, "–ø–æ–∫—É–ø–∫–∏"),
            ("–ö–∞–∫ –≤—ã—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π?", False, "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ"),
            ("–†–µ–º–æ–Ω—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å–≤–æ–∏–º–∏ —Ä—É–∫–∞–º–∏", False, "–∞–≤—Ç–æ"),
            ("–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ?", False, "–∑–∞—Ä–∞–±–æ—Ç–æ–∫"),
        ]
    
    def run_extended_test(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        test_cases = self.get_extended_test_cases()
        
        print(f"\nüîç –†–ê–°–®–ò–†–ï–ù–ù–´–ô –¢–ï–°–¢ –ù–ê {len(test_cases)} –°–õ–£–ß–ê–Ø–•")
        print("=" * 70)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        print(f"{'‚Ññ':<3} {'–í–æ–ø—Ä–æ—Å':<45} {'–û–∂–∏–¥.':<6} {'–ë–∞–∑.':<6} {'–£–ª—É—á.':<6} {'ML':<6} {'–ì–∏–±—Ä.':<6}")
        print("-" * 80)
        
        results = {name: {'correct': 0, 'total': 0} for name in self.filters.keys()}
        category_results = {}
        detailed_results = []
        
        for i, (question, expected, category) in enumerate(test_cases, 1):
            expected_str = "–Æ–†" if expected else "–ù–ï –Æ–†"
            filter_results = {}
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if category not in category_results:
                category_results[category] = {name: {'correct': 0, 'total': 0} for name in self.filters.keys()}
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∏–ª—å—Ç—Ä
            for name, filter_instance in self.filters.items():
                try:
                    is_legal, score, explanation = filter_instance.is_legal_question(question)
                    result_str = "–Æ–†" if is_legal else "–ù–ï –Æ–†"
                    is_correct = is_legal == expected
                    
                    filter_results[name] = {
                        'result': is_legal,
                        'score': score,
                        'str': result_str,
                        'correct': is_correct
                    }
                    
                    if is_correct:
                        results[name]['correct'] += 1
                        category_results[category][name]['correct'] += 1
                    
                    results[name]['total'] += 1
                    category_results[category][name]['total'] += 1
                    
                except Exception as e:
                    filter_results[name] = {
                        'result': False,
                        'score': 0.0,
                        'str': "ERR",
                        'correct': False
                    }
                    results[name]['total'] += 1
                    category_results[category][name]['total'] += 1
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            question_short = question[:43] + "..." if len(question) > 43 else question
            base_result = filter_results.get('–ë–∞–∑–æ–≤—ã–π', {}).get('str', 'N/A')
            improved_result = filter_results.get('–£–ª—É—á—à–µ–Ω–Ω—ã–π', {}).get('str', 'N/A')
            ml_result = filter_results.get('ML', {}).get('str', 'N/A')
            hybrid_result = filter_results.get('–ì–∏–±—Ä–∏–¥–Ω—ã–π', {}).get('str', 'N/A')
            
            print(f"{i:<3} {question_short:<45} {expected_str:<6} {base_result:<6} {improved_result:<6} {ml_result:<6} {hybrid_result:<6}")
            
            detailed_results.append({
                'question': question,
                'expected': expected,
                'category': category,
                'results': filter_results
            })
        
        # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ({len(test_cases)} —Å–ª—É—á–∞–µ–≤)")
        print("=" * 50)
        
        for name, stats in results.items():
            if stats['total'] > 0:
                accuracy = stats['correct'] / stats['total'] * 100
                print(f"{name:<12}: {stats['correct']:2d}/{stats['total']:2d} ({accuracy:5.1f}%)")
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        print(f"\nüìã –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú")
        print("=" * 50)
        
        for category, cat_results in category_results.items():
            print(f"\nüè∑Ô∏è  {category.upper()}:")
            for name, stats in cat_results.items():
                if stats['total'] > 0:
                    accuracy = stats['correct'] / stats['total'] * 100
                    print(f"   {name:<12}: {stats['correct']:2d}/{stats['total']:2d} ({accuracy:5.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print(f"\nüèÜ –ê–ù–ê–õ–ò–ó –õ–£–ß–®–ò–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 50)
        
        best_filter = max(results.items(), key=lambda x: x[1]['correct'] / max(x[1]['total'], 1))
        best_name, best_stats = best_filter
        best_accuracy = best_stats['correct'] / best_stats['total'] * 100
        
        print(f"ü•á –õ—É—á—à–∏–π —Ñ–∏–ª—å—Ç—Ä: {best_name}")
        print(f"   –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {best_accuracy:.1f}% ({best_stats['correct']}/{best_stats['total']})")
        
        # –¢–æ–ø-3 —Ñ–∏–ª—å—Ç—Ä–æ–≤
        sorted_filters = sorted(results.items(), key=lambda x: x[1]['correct'] / max(x[1]['total'], 1), reverse=True)
        print(f"\nüèÖ –¢–û–ü-3 –§–ò–õ–¨–¢–†–û–í:")
        for i, (name, stats) in enumerate(sorted_filters[:3], 1):
            accuracy = stats['correct'] / stats['total'] * 100
            print(f"   {i}. {name}: {accuracy:.1f}% ({stats['correct']}/{stats['total']})")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–´–• –°–õ–£–ß–ê–ï–í")
        print("=" * 50)
        
        problem_cases = []
        for result in detailed_results:
            question = result['question']
            expected = result['expected']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ –ª—É—á—à–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            if best_name in result['results']:
                best_filter_result = result['results'][best_name]
                if not best_filter_result['correct']:
                    problem_cases.append({
                        'question': question,
                        'expected': expected,
                        'got': best_filter_result['result'],
                        'score': best_filter_result['score'],
                        'category': result['category']
                    })
        
        if problem_cases:
            print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è {best_name} —Ñ–∏–ª—å—Ç—Ä–∞ ({len(problem_cases)} –∏–∑ {best_stats['total']}):")
            for case in problem_cases:
                expected_str = "–Æ–†" if case['expected'] else "–ù–ï –Æ–†"
                got_str = "–Æ–†" if case['got'] else "–ù–ï –Æ–†"
                print(f"   ‚Ä¢ {case['question']}")
                print(f"     –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_str}, –ü–æ–ª—É—á–µ–Ω–æ: {got_str} (–±–∞–ª–ª: {case['score']:.3f})")
                print(f"     –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {case['category']}")
        else:
            print(f"üéâ {best_name} —Ñ–∏–ª—å—Ç—Ä —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å–æ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏!")
        
        return results, category_results, detailed_results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ –†–ê–°–®–ò–†–ï–ù–ù–´–ô COMPREHENSIVE –¢–ï–°–¢ –§–ò–õ–¨–¢–†–û–í")
    print("=" * 70)
    
    try:
        test = ExtendedComprehensiveTest()
        results, category_results, detailed_results = test.run_extended_test()
        
        print(f"\n‚úÖ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
        print("=" * 50)
        print("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞")
        print("üìä –Ω–∞ –±–æ–ª—å—à–æ–º –Ω–∞–±–æ—Ä–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–ª—É—á–∞–µ–≤")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 