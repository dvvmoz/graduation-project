global
    daemon
    maxconn 4096
    log stdout local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option http-server-close
    option forwardfor except 127.0.0.0/8
    option redispatch
    retries 3
    timeout http-request 10s
    timeout queue 1m
    timeout connect 10s
    timeout client 1m
    timeout server 1m
    timeout http-keep-alive 10s
    timeout check 10s
    maxconn 3000

# Statistics page
frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats auth admin:admin

# Main frontend
frontend legal_bot_frontend
    bind *:8080
    
    # ACLs for routing
    acl is_api path_beg /api/
    acl is_health path /health
    acl is_static path_end .js .css .png .jpg .jpeg .gif .ico .svg .woff .woff2 .ttf .eot
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 20 }
    
    # Security headers
    http-response set-header X-Frame-Options SAMEORIGIN
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    
    # Routing
    use_backend legal_bot_api if is_api
    use_backend legal_bot_static if is_static
    default_backend legal_bot_main

# Backend for API requests
backend legal_bot_api
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    server bot1 legal-bot_1:5000 check inter 10s rise 2 fall 3 maxconn 100
    server bot2 legal-bot_2:5000 check inter 10s rise 2 fall 3 maxconn 100
    server bot3 legal-bot_3:5000 check inter 10s rise 2 fall 3 maxconn 100
    server bot4 legal-bot_4:5000 check inter 10s rise 2 fall 3 maxconn 100
    server bot5 legal-bot_5:5000 check inter 10s rise 2 fall 3 maxconn 100

# Backend for static files
backend legal_bot_static
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Cache static files
    http-response set-header Cache-Control "public, max-age=31536000"
    
    server bot1 legal-bot_1:5000 check inter 30s rise 2 fall 3 maxconn 50
    server bot2 legal-bot_2:5000 check inter 30s rise 2 fall 3 maxconn 50
    server bot3 legal-bot_3:5000 check inter 30s rise 2 fall 3 maxconn 50
    server bot4 legal-bot_4:5000 check inter 30s rise 2 fall 3 maxconn 50
    server bot5 legal-bot_5:5000 check inter 30s rise 2 fall 3 maxconn 50

# Main backend
backend legal_bot_main
    balance leastconn
    option httpchk GET /health
    http-check expect status 200
    
    # Session persistence
    cookie SERVERID insert indirect nocache
    
    server bot1 legal-bot_1:5000 check inter 10s rise 2 fall 3 maxconn 200 cookie bot1
    server bot2 legal-bot_2:5000 check inter 10s rise 2 fall 3 maxconn 200 cookie bot2
    server bot3 legal-bot_3:5000 check inter 10s rise 2 fall 3 maxconn 200 cookie bot3
    server bot4 legal-bot_4:5000 check inter 10s rise 2 fall 3 maxconn 200 cookie bot4
    server bot5 legal-bot_5:5000 check inter 10s rise 2 fall 3 maxconn 200 cookie bot5

# Error pages
errorfile 400 /etc/haproxy/errors/400.http
errorfile 403 /etc/haproxy/errors/403.http
errorfile 408 /etc/haproxy/errors/408.http
errorfile 500 /etc/haproxy/errors/500.http
errorfile 502 /etc/haproxy/errors/502.http
errorfile 503 /etc/haproxy/errors/503.http
errorfile 504 /etc/haproxy/errors/504.http 