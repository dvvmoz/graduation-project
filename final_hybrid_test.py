#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞.
"""

from modules.bot_handler import is_legal_question, get_rejection_message

def main():
    print("üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ì–ò–ë–†–ò–î–ù–û–ì–û –§–ò–õ–¨–¢–†–ê")
    print("=" * 40)
    
    # –ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã
    tests = [
        ("–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∏—Å–∫ –≤ —Å—É–¥?", True),
        ("–ú–µ–Ω—è –∫–∏–Ω—É–ª–∏ —Å –¥–µ–Ω—å–≥–∞–º–∏", True),
        ("–≠—Å—Ç–æ–ø–ø–µ–ª—å –≤ –ø—Ä–∞–≤–µ", True),
        ("–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â?", False),
        ("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", False),
    ]
    
    correct = 0
    for question, expected in tests:
        result = is_legal_question(question)
        is_legal, score, explanation = result
        
        status = "‚úÖ" if is_legal == expected else "‚ùå"
        legal_str = "–Æ–†" if is_legal else "–ù–ï –Æ–†"
        
        print(f"{status} {question}: {legal_str} (–±–∞–ª–ª: {score:.3f})")
        
        if is_legal == expected:
            correct += 1
    
    accuracy = correct / len(tests) * 100
    print(f"\nüìä –¢–æ—á–Ω–æ—Å—Ç—å: {correct}/{len(tests)} ({accuracy:.1f}%)")
    
    # –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
    print(f"\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏:")
    rejection_msg = get_rejection_message()
    print(f"‚úÖ {rejection_msg[:50]}...")
    
    print(f"\nüéâ –ì–ò–ë–†–ò–î–ù–´–ô –§–ò–õ–¨–¢–† –ê–ö–¢–ò–í–ï–ù –ò –†–ê–ë–û–¢–ê–ï–¢!")

if __name__ == "__main__":
    main() 