#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –Æ—Ä–ü–æ–º–æ—â–Ω–∏–∫–∞ –†–ë
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é, –º–æ–¥—É–ª–∏, ML —Ñ–∏–ª—å—Ç—Ä, –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
"""

import os
import sys
import logging
import importlib
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class SystemTester:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã."""
    
    def __init__(self):
        self.test_results = {}
        self.errors = []
        self.warnings = []
        
    def test_configuration(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã."""
        logger.info("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            required_files = [
                'config.py',
                'main.py',
                'modules/bot_handler.py',
                'requirements.txt'
            ]
            
            for file_path in required_files:
                if os.path.exists(file_path):
                    logger.info(f"‚úÖ {file_path} - –Ω–∞–π–¥–µ–Ω")
                else:
                    logger.error(f"‚ùå {file_path} - –ù–ï –ù–ê–ô–î–ï–ù")
                    self.errors.append(f"–§–∞–π–ª {file_path} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            try:
                import config
                logger.info("‚úÖ –ú–æ–¥—É–ª—å config –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ config: {e}")
                self.errors.append(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ config: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            env_file = '.env'
            if not os.path.exists(env_file):
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {env_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π...")
                self.create_test_env()
            
            self.test_results['configuration'] = len(self.errors) == 0
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.errors.append(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.test_results['configuration'] = False
    
    def test_modules(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ —Å–∏—Å—Ç–µ–º—ã."""
        logger.info("üì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π...")
        
        modules_to_test = [
            'modules.bot_handler',
            'modules.knowledge_base',
            'modules.llm_service',
            'modules.web_scraper',
            'modules.ml_question_filter',
            'modules.text_processing'
        ]
        
        for module_name in modules_to_test:
            try:
                module = importlib.import_module(module_name)
                logger.info(f"‚úÖ {module_name} - –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {module_name}: {e}")
                self.errors.append(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ {module_name}: {e}")
        
        self.test_results['modules'] = len([e for e in self.errors if '–º–æ–¥—É–ª—è' in e]) == 0
    
    def test_ml_filter(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ML —Ñ–∏–ª—å—Ç—Ä –≤–æ–ø—Ä–æ—Å–æ–≤."""
        logger.info("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML —Ñ–∏–ª—å—Ç—Ä–∞...")
        
        try:
            from modules.ml_question_filter import is_legal_question_ml
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            test_questions = [
                "–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ò–ü –≤ –ë–µ–ª–∞—Ä—É—Å–∏?",
                "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è?",
                "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä?",
                "–ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ —É–∂–∏–Ω?",
                "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ä–∞–∑–≤–æ–¥–∞?",
                "–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?"
            ]
            
            legal_count = 0
            for question in test_questions:
                try:
                    is_legal = is_legal_question_ml(question)
                    if is_legal:
                        legal_count += 1
                        logger.info(f"‚úÖ '{question}' - —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å")
                    else:
                        logger.info(f"‚ùå '{question}' - –Ω–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å")
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ '{question}': {e}")
                    self.errors.append(f"–û—à–∏–±–∫–∞ ML —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è '{question}': {e}")
            
            accuracy = legal_count / len(test_questions) * 100
            logger.info(f"üìä –¢–æ—á–Ω–æ—Å—Ç—å ML —Ñ–∏–ª—å—Ç—Ä–∞: {accuracy:.1f}%")
            
            self.test_results['ml_filter'] = accuracy >= 80  # –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 80%
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ML —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
            self.errors.append(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ML —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
            self.test_results['ml_filter'] = False
    
    def test_knowledge_base(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π."""
        logger.info("üìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
        
        try:
            from modules.knowledge_base import get_knowledge_base
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
            kb = get_knowledge_base()
            if kb:
                logger.info("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞")
                self.test_results['knowledge_base'] = True
            else:
                logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                self.warnings.append("–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                self.test_results['knowledge_base'] = False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            self.errors.append(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            self.test_results['knowledge_base'] = False
    
    def test_dependencies(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞."""
        logger.info("üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        try:
            import aiogram
            import openai
            import chromadb
            import numpy
            import sklearn
            import pandas
            
            logger.info("‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
            self.test_results['dependencies'] = True
            
        except ImportError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            self.errors.append(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
            self.test_results['dependencies'] = False
    
    def test_docker_config(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é."""
        logger.info("üê≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        docker_files = [
            'Dockerfile',
            'Dockerfile.prod',
            'docker-compose.prod.yml',
            'docker-compose.test.yml'
        ]
        
        all_exist = True
        for file_path in docker_files:
            if os.path.exists(file_path):
                logger.info(f"‚úÖ {file_path} - –Ω–∞–π–¥–µ–Ω")
            else:
                logger.warning(f"‚ö†Ô∏è {file_path} - –ù–ï –ù–ê–ô–î–ï–ù")
                all_exist = False
        
        self.test_results['docker_config'] = all_exist
    
    def create_test_env(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π .env —Ñ–∞–π–ª."""
        try:
            env_content = """# Test Configuration –¥–ª—è –Æ—Ä–ü–æ–º–æ—â–Ω–∏–∫–∞
TELEGRAM_TOKEN=test_token_for_local_testing
OPENAI_API_KEY=test_openai_key_for_local_testing
SECRET_KEY=test_secret_key_for_local_development_only_32chars
ADMIN_PASSWORD=test_admin_password
CHROMA_DB_PATH=db/chroma
LOG_LEVEL=INFO
MAX_TOKENS=2000
ALLOWED_HOSTS=localhost,127.0.0.1
CORS_ORIGINS=http://localhost:5000,http://127.0.0.1:5000
"""
            with open('.env', 'w', encoding='utf-8') as f:
                f.write(env_content)
            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π .env —Ñ–∞–π–ª")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è .env —Ñ–∞–π–ª–∞: {e}")
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã."""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
        
        self.test_configuration()
        self.test_dependencies()
        self.test_modules()
        self.test_ml_filter()
        self.test_knowledge_base()
        self.test_docker_config()
        
        self.print_results()
    
    def print_results(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        logger.info("\n" + "="*60)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
        logger.info("="*60)
        
        total_tests = len(self.test_results)
        passed_tests = sum(self.test_results.values())
        
        for test_name, result in self.test_results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            logger.info(f"{test_name.replace('_', ' ').title()}: {status}")
        
        logger.info(f"\nüìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if self.errors:
            logger.info(f"\n‚ùå –û–®–ò–ë–ö–ò ({len(self.errors)}):")
            for error in self.errors:
                logger.info(f"  - {error}")
        
        if self.warnings:
            logger.info(f"\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø ({len(self.warnings)}):")
            for warning in self.warnings:
                logger.info(f"  - {warning}")
        
        if passed_tests == total_tests:
            logger.info("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        else:
            logger.info(f"\n‚ö†Ô∏è {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    tester = SystemTester()
    tester.run_all_tests()

if __name__ == "__main__":
    main() 