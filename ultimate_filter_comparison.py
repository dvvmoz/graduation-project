#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
–í–∫–ª—é—á–∞–µ—Ç –±–∞–∑–æ–≤—ã–π, —É–ª—É—á—à–µ–Ω–Ω—ã–π, ML –∏ –≥–∏–±—Ä–∏–¥–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä—ã.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from modules.question_filter import QuestionFilter
from modules.improved_question_filter import ImprovedQuestionFilter
from modules.ml_question_filter import MLQuestionFilter
from modules.hybrid_question_filter import HybridQuestionFilter

class UltimateFilterComparison:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        print("üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –í–°–ï–• –§–ò–õ–¨–¢–†–û–í")
        print("=" * 60)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        self.filters = {}
        
        try:
            self.filters['–ë–∞–∑–æ–≤—ã–π'] = QuestionFilter()
            print("‚úÖ –ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
        
        try:
            self.filters['–£–ª—É—á—à–µ–Ω–Ω—ã–π'] = ImprovedQuestionFilter()
            print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
        
        try:
            self.filters['ML'] = MLQuestionFilter()
            print("‚úÖ ML-—Ñ–∏–ª—å—Ç—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML-—Ñ–∏–ª—å—Ç—Ä–∞: {e}")
        
        try:
            self.filters['–ì–∏–±—Ä–∏–¥–Ω—ã–π'] = HybridQuestionFilter()
            print("‚úÖ –ì–∏–±—Ä–∏–¥–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
        
        print(f"\nüìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.filters)} —Ñ–∏–ª—å—Ç—Ä–æ–≤")
    
    def get_test_cases(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
        return [
            # –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
            ("–ú–µ–Ω—è –∫–∏–Ω—É–ª–∏ —Å –¥–µ–Ω—å–≥–∞–º–∏, —á—Ç–æ –¥–µ–ª–∞—Ç—å?", True, "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π"),
            ("–≠—Å—Ç–æ–ø–ø–µ–ª—å –≤ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –ø—Ä–∞–≤–µ", True, "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"),
            ("–ß—Ç–æ —Ç–∞–∫–æ–µ habeas corpus?", True, "–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π"),
            ("–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ —É –º–µ–Ω—è –µ—Å—Ç—å?", True, "–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π"),
            ("–ö—É–ø–∏–ª —Ç–µ–ª–µ—Ñ–æ–Ω, –∞ –æ–Ω —Å–ª–æ–º–∞–ª—Å—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é", True, "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π"),
            ("–í—Ä–∞—á —Å–¥–µ–ª–∞–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é", True, "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π"),
            ("–°—É–±—Ä–æ–≥–∞—Ü–∏—è –≤ —Å—Ç—Ä–∞—Ö–æ–≤–æ–º –ø—Ä–∞–≤–µ", True, "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"),
            ("–ñ–∏–ª–∏—â–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –í–∏—Ç–µ–±—Å–∫–µ", True, "—Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π"),
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
            ("–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∏—Å–∫ –≤ —Å—É–¥ –≤ –ë–µ–ª–∞—Ä—É—Å–∏?", True, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"),
            ("–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ä–∞–∑–≤–æ–¥–∞?", True, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"),
            ("–ü—Ä–∞–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –≤ –ë–µ–ª–∞—Ä—É—Å–∏", True, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π"),
            
            # –ù–µ—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
            ("–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â?", False, "–æ–±—ã—á–Ω–æ–µ"),
            ("–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞?", False, "–æ–±—ã—á–Ω–æ–µ"),
            ("–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Windows?", False, "–æ–±—ã—á–Ω–æ–µ"),
            ("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", False, "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ"),
            ("–°—É–¥ –ø—Ä–∏—Å—è–∂–Ω—ã—Ö –≤ –∫–∏–Ω–æ", False, "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ"),
            ("–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã?", False, "–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π_–Ω–µ_—é—Ä"),
        ]
    
    def run_comparison(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        test_cases = self.get_test_cases()
        
        print("\nüîç –°–†–ê–í–ù–ï–ù–ò–ï –í–°–ï–• –§–ò–õ–¨–¢–†–û–í")
        print("=" * 60)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        print(f"{'–í–æ–ø—Ä–æ—Å':<45} {'–û–∂–∏–¥.':<6} {'–ë–∞–∑.':<8} {'–£–ª—É—á.':<8} {'ML':<8} {'–ì–∏–±—Ä.':<8}")
        print("-" * 90)
        
        results = {name: {'correct': 0, 'total': 0} for name in self.filters.keys()}
        detailed_results = []
        
        for question, expected, category in test_cases:
            expected_str = "–Æ–†" if expected else "–ù–ï –Æ–†"
            filter_results = {}
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∏–ª—å—Ç—Ä
            for name, filter_instance in self.filters.items():
                try:
                    is_legal, score, explanation = filter_instance.is_legal_question(question)
                    result_str = "–Æ–†" if is_legal else "–ù–ï –Æ–†"
                    filter_results[name] = {
                        'result': is_legal,
                        'score': score,
                        'str': result_str,
                        'correct': is_legal == expected
                    }
                    
                    if is_legal == expected:
                        results[name]['correct'] += 1
                    results[name]['total'] += 1
                    
                except Exception as e:
                    filter_results[name] = {
                        'result': False,
                        'score': 0.0,
                        'str': "–û–®–ò–ë–ö–ê",
                        'correct': False
                    }
                    results[name]['total'] += 1
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            question_short = question[:43] + "..." if len(question) > 43 else question
            base_result = filter_results.get('–ë–∞–∑–æ–≤—ã–π', {}).get('str', 'N/A')
            improved_result = filter_results.get('–£–ª—É—á—à–µ–Ω–Ω—ã–π', {}).get('str', 'N/A')
            ml_result = filter_results.get('ML', {}).get('str', 'N/A')
            hybrid_result = filter_results.get('–ì–∏–±—Ä–∏–¥–Ω—ã–π', {}).get('str', 'N/A')
            
            print(f"{question_short:<45} {expected_str:<6} {base_result:<8} {improved_result:<8} {ml_result:<8} {hybrid_result:<8}")
            
            detailed_results.append({
                'question': question,
                'expected': expected,
                'category': category,
                'results': filter_results
            })
        
        # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–û–ß–ù–û–°–¢–ò")
        print("=" * 40)
        
        for name, stats in results.items():
            if stats['total'] > 0:
                accuracy = stats['correct'] / stats['total'] * 100
                print(f"{name:<12}: {stats['correct']:2d}/{stats['total']:2d} ({accuracy:5.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüèÜ –ê–ù–ê–õ–ò–ó –õ–£–ß–®–ò–• –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
        print("=" * 40)
        
        best_filter = max(results.items(), key=lambda x: x[1]['correct'] / max(x[1]['total'], 1))
        best_name, best_stats = best_filter
        best_accuracy = best_stats['correct'] / best_stats['total'] * 100
        
        print(f"ü•á –õ—É—á—à–∏–π —Ñ–∏–ª—å—Ç—Ä: {best_name}")
        print(f"   –¢–æ—á–Ω–æ—Å—Ç—å: {best_accuracy:.1f}% ({best_stats['correct']}/{best_stats['total']})")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏
        print("\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–´–• –°–õ–£–ß–ê–ï–í")
        print("=" * 40)
        
        problem_cases = []
        for result in detailed_results:
            question = result['question']
            expected = result['expected']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∏ —É –ª—É—á—à–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
            if best_name in result['results']:
                best_filter_result = result['results'][best_name]
                if not best_filter_result['correct']:
                    problem_cases.append({
                        'question': question,
                        'expected': expected,
                        'got': best_filter_result['result'],
                        'score': best_filter_result['score'],
                        'category': result['category']
                    })
        
        if problem_cases:
            print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è {best_name} —Ñ–∏–ª—å—Ç—Ä–∞:")
            for case in problem_cases:
                expected_str = "–Æ–†" if case['expected'] else "–ù–ï –Æ–†"
                got_str = "–Æ–†" if case['got'] else "–ù–ï –Æ–†"
                print(f"   ‚Ä¢ {case['question'][:50]}...")
                print(f"     –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_str}, –ü–æ–ª—É—á–µ–Ω–æ: {got_str} (–±–∞–ª–ª: {case['score']:.3f})")
                print(f"     –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {case['category']}")
        else:
            print(f"üéâ {best_name} —Ñ–∏–ª—å—Ç—Ä —Å–ø—Ä–∞–≤–∏–ª—Å—è —Å–æ –≤—Å–µ–º–∏ —Ç–µ—Å—Ç–∞–º–∏!")
        
        return results, detailed_results

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ –§–ò–ù–ê–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –í–°–ï–• –§–ò–õ–¨–¢–†–û–í")
    print("=" * 60)
    
    try:
        comparison = UltimateFilterComparison()
        results, detailed_results = comparison.run_comparison()
        
        print("\n‚úÖ –°–†–ê–í–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä —Å –Ω–∞–∏–≤—ã—Å—à–µ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞.")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 