# Multi-stage build для оптимизации размера
FROM python:3.9-slim as builder

# Устанавливаем системные зависимости для сборки
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Создаем пользователя для сборки
RUN useradd --create-home --shell /bin/bash app

# Устанавливаем зависимости Python
COPY requirements.txt /tmp/
RUN pip install --no-cache-dir --user -r /tmp/requirements.txt

# Production stage
FROM python:3.9-slim

# Устанавливаем только необходимые runtime зависимости
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# Создаем non-root пользователя
RUN useradd --create-home --shell /bin/bash --uid 1001 app

# Копируем установленные пакеты Python
COPY --from=builder /root/.local /home/app/.local

# Устанавливаем рабочую директорию
WORKDIR /app

# Копируем исходный код
COPY --chown=app:app . .

# Создаем необходимые директории с правильными правами
RUN mkdir -p data db/chroma logs models /tmp/app && \
    chown -R app:app /app /tmp/app

# Устанавливаем переменные окружения
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV PATH=/home/app/.local/bin:$PATH
ENV ENVIRONMENT=production

# Переключаемся на non-root пользователя
USER app

# Открываем порты
EXPOSE 5000 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD python -c "import requests; requests.get('http://localhost:5000/health')" || exit 1

# Команда для запуска приложения
CMD ["python", "main.py"] 