#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏–∑ PDF —Ñ–∞–π–ª–æ–≤.
"""
import os
import sys
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from config import load_config
from modules.text_processing import extract_text_from_pdf, split_text_into_structure
from modules.knowledge_base import add_document, get_knowledge_base

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def process_pdf_file(pdf_path: str, source_folder: str = "data") -> int:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω PDF —Ñ–∞–π–ª –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.
    
    Args:
        pdf_path: –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
        source_folder: –ü–∞–ø–∫–∞-–∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    """
    try:
        filename = os.path.basename(pdf_path)
        logger.info(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {filename}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ PDF
        full_text = extract_text_from_pdf(pdf_path)
        
        if not full_text.strip():
            logger.warning(f"‚ùå –§–∞–π–ª {filename} –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞")
            return 0
        
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∏
        text_blocks = split_text_into_structure(full_text)
        
        if not text_blocks:
            logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ {filename}")
            return 0
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π –±–ª–æ–∫ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        added_count = 0
        base_name = os.path.splitext(filename)[0]
        
        for i, block in enumerate(text_blocks):
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
            doc_id = f"{base_name}_block_{i:03d}"
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–ª–æ–∫–∞
            metadata = {
                "source_file": filename,
                "source_folder": source_folder,
                "block_index": i,
                "total_blocks": len(text_blocks),
                "block_length": len(block)
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
            if add_document(doc_id, block, metadata):
                added_count += 1
            else:
                logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫ {i} –∏–∑ —Ñ–∞–π–ª–∞ {filename}")
        
        logger.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {added_count} –±–ª–æ–∫–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ {filename}")
        return added_count
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ {pdf_path}: {e}")
        return 0

def populate_from_directory(data_dir: str = "data") -> dict:
    """
    –ù–∞–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ –≤—Å–µ—Ö PDF —Ñ–∞–π–ª–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    
    Args:
        data_dir: –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å PDF —Ñ–∞–π–ª–∞–º–∏
        
    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    """
    stats = {
        "total_files": 0,
        "processed_files": 0,
        "total_blocks": 0,
        "failed_files": []
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not os.path.exists(data_dir):
        logger.error(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {data_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return stats
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ PDF —Ñ–∞–π–ª–æ–≤
    pdf_files = [f for f in os.listdir(data_dir) if f.lower().endswith('.pdf')]
    
    if not pdf_files:
        logger.warning(f"‚ùå PDF —Ñ–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {data_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return stats
    
    stats["total_files"] = len(pdf_files)
    logger.info(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(pdf_files)} PDF —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for filename in pdf_files:
        pdf_path = os.path.join(data_dir, filename)
        
        blocks_added = process_pdf_file(pdf_path, data_dir)
        
        if blocks_added > 0:
            stats["processed_files"] += 1
            stats["total_blocks"] += blocks_added
        else:
            stats["failed_files"].append(filename)
    
    return stats

def show_statistics(stats: dict):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    
    Args:
        stats: –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    """
    logger.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    logger.info(f"  üìÑ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {stats['total_files']}")
    logger.info(f"  ‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: {stats['processed_files']}")
    logger.info(f"  üìù –î–æ–±–∞–≤–ª–µ–Ω–æ –±–ª–æ–∫–æ–≤: {stats['total_blocks']}")
    
    if stats['failed_files']:
        logger.warning(f"  ‚ùå –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏: {len(stats['failed_files'])}")
        for filename in stats['failed_files']:
            logger.warning(f"    - {filename}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    kb = get_knowledge_base()
    kb_stats = kb.get_collection_stats()
    logger.info(f"  üóÇÔ∏è –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: {kb_stats.get('total_documents', 0)}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        load_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ data
        data_dir = "data"
        if not os.path.exists(data_dir):
            logger.info(f"üìÅ –°–æ–∑–¥–∞—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {data_dir}")
            os.makedirs(data_dir)
            logger.info(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {data_dir} —Å–æ–∑–¥–∞–Ω–∞. –î–æ–±–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.")
            return
        
        # –ù–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
        stats = populate_from_directory(data_dir)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        show_statistics(stats)
        
        if stats["processed_files"] > 0:
            logger.info("‚úÖ –ù–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        else:
            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
            
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 