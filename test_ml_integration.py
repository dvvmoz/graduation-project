#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ML-—Ñ–∏–ª—å—Ç—Ä–∞ –≤ bot_handler.py
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from modules.ml_question_filter import is_legal_question_ml, get_ml_rejection_message

def test_ml_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é ML-—Ñ–∏–ª—å—Ç—Ä–∞."""
    print("üß™ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ML-–§–ò–õ–¨–¢–†–ê")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        ("–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∏—Å–∫ –≤ —Å—É–¥ –≤ –ë–µ–ª–∞—Ä—É—Å–∏?", True),
        ("–ú–µ–Ω—è –∫–∏–Ω—É–ª–∏ —Å –¥–µ–Ω—å–≥–∞–º–∏, —á—Ç–æ –¥–µ–ª–∞—Ç—å?", True),
        ("–≠—Å—Ç–æ–ø–ø–µ–ª—å –≤ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –ø—Ä–∞–≤–µ", True),
        ("–ß—Ç–æ —Ç–∞–∫–æ–µ habeas corpus?", True),
        ("–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ —É –º–µ–Ω—è –µ—Å—Ç—å?", True),
        ("–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â?", False),
        ("–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞?", False),
        ("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", False),
    ]
    
    print(f"üìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(test_cases)} —Å–ª—É—á–∞–µ–≤:")
    print("-" * 70)
    print(f"{'–í–æ–ø—Ä–æ—Å':<45} {'–û–∂–∏–¥–∞–µ—Ç—Å—è':<10} {'–†–µ–∑—É–ª—å—Ç–∞—Ç':<10} {'–°—Ç–∞—Ç—É—Å':<8}")
    print("-" * 70)
    
    correct = 0
    total = len(test_cases)
    
    for question, expected in test_cases:
        try:
            is_legal, score, explanation = is_legal_question_ml(question)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            is_correct = is_legal == expected
            if is_correct:
                correct += 1
                status = "‚úÖ OK"
            else:
                status = "‚ùå FAIL"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
            question_short = question[:43] + "..." if len(question) > 43 else question
            expected_str = "–Æ–†" if expected else "–ù–ï –Æ–†"
            result_str = "–Æ–†" if is_legal else "–ù–ï –Æ–†"
            
            print(f"{question_short:<45} {expected_str:<10} {result_str:<10} {status:<8}")
            
        except Exception as e:
            print(f"{question[:43]:<45} {'ERROR':<10} {'ERROR':<10} {'‚ùå ERR':<8}")
            print(f"   –û—à–∏–±–∫–∞: {e}")
    
    print("-" * 70)
    accuracy = correct / total * 100
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢: {correct}/{total} ({accuracy:.1f}%)")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
    print(f"\nüìù –¢–ï–°–¢ –°–û–û–ë–©–ï–ù–ò–Ø –û–¢–ö–õ–û–ù–ï–ù–ò–Ø:")
    try:
        rejection_message = get_ml_rejection_message()
        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ: {len(rejection_message)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"   –ù–∞—á–∞–ª–æ: {rejection_message[:100]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(f"\nüèÜ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
    if accuracy >= 80:
        print(f"‚úÖ –£–°–ü–ï–®–ù–û - ML-—Ñ–∏–ª—å—Ç—Ä –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ({accuracy:.1f}%)")
        return True
    else:
        print(f"‚ùå –ù–ï–£–î–ê–ß–ù–û - –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å ({accuracy:.1f}%)")
        return False

def test_import_compatibility():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–æ–≤."""
    print(f"\nüîß –¢–ï–°–¢ –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –ò–ú–ü–û–†–¢–û–í:")
    print("-" * 40)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –∫–∞–∫ –≤ bot_handler.py
        from modules.ml_question_filter import is_legal_question_ml as is_legal_question, get_ml_rejection_message as get_rejection_message
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        result = is_legal_question("–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å")
        message = get_rejection_message()
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã —Å–æ–≤–º–µ—Å—Ç–∏–º—ã")
        print("‚úÖ –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üéØ –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ML-–§–ò–õ–¨–¢–†–ê –í BOT_HANDLER")
    print("=" * 60)
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
        integration_ok = test_ml_integration()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        compatibility_ok = test_import_compatibility()
        
        # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print(f"\nüèÅ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("=" * 30)
        
        if integration_ok and compatibility_ok:
            print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
            print("‚úÖ ML-—Ñ–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ bot_handler.py")
            print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        else:
            print("‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´ –° –ò–ù–¢–ï–ì–†–ê–¶–ò–ï–ô")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 