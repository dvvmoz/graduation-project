#!/usr/bin/env python3
"""
–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤.
"""
import disable_telemetry
import os
import sys
from pathlib import Path

# –û—Ç–∫–ª—é—á–∞–µ–º —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é ChromaDB
os.environ["ANONYMIZED_TELEMETRY"] = "False"
os.environ["CHROMA_TELEMETRY"] = "False"

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from modules.question_filter import QuestionFilter
from modules.legal_content_filter import LegalContentFilter
from typing import List, Dict, Tuple

class AdvancedFilterTester:
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç–µ—Ä."""
        self.question_filter = QuestionFilter()
        self.content_filter = LegalContentFilter()
        
        # –°–ª–æ–∂–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
        self.complex_test_cases = {
            "ambiguous_questions": [
                # –í–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∫–∞–∫ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏, —Ç–∞–∫ –∏ –Ω–µ—Ç
                "–ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏?",  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ò–õ–ò –Ω–∞–ª–æ–≥–æ–≤—ã–π
                "–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å –¥–æ–ª–≥–∞–º–∏?",  # –ú–æ–∂–µ—Ç –±—ã—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–æ–≤–µ—Ç –ò–õ–ò —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π
                "–ö–∞–∫ –∑–∞—â–∏—Ç–∏—Ç—å —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã?",  # –û—á–µ–Ω—å –æ–±—â–∏–π –≤–æ–ø—Ä–æ—Å
                "–ü—Ä–∞–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",  # –ú–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Ç–µ–º–∞ –ò–õ–ò –ø—Ä–∞–≤–æ–≤–∞—è
                "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ?",  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º
                "–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–∏ –∏ –∑–¥–æ—Ä–æ–≤—å—è",  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Ç–µ–º–∞ –ò–õ–ò –ø—Ä–∞–≤–æ–≤–∞—è
                "–ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —É—Å–ª—É–≥–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞",  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∞—è —Ç–µ–º–∞ –ò–õ–ò –ø—Ä–∞–≤–æ–≤–∞—è
                "–ó–∞—â–∏—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",  # –ú–æ–∂–µ—Ç –±—ã—Ç—å IT-—Ç–µ–º–∞ –ò–õ–ò –ø—Ä–∞–≤–æ–≤–∞—è
                "–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã —Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º",  # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º
                "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –≤—Ä–∞—á–µ–π",  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Ç–µ–º–∞ –ò–õ–ò –ø—Ä–∞–≤–æ–≤–∞—è
            ],
            
            "context_dependent": [
                # –í–æ–ø—Ä–æ—Å—ã, –≥–¥–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —é—Ä–∏–¥–∏—á–Ω–æ—Å—Ç—å
                "–ö–∞–∫ –ø–æ–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã?",  # –°–ª–∏—à–∫–æ–º –æ–±—â–∏–π - –∫—É–¥–∞? –∫–∞–∫–∏–µ?
                "–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ —É –º–µ–Ω—è –µ—Å—Ç—å?",  # –°–ª–∏—à–∫–æ–º –æ–±—â–∏–π - –≤ –∫–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏?
                "–ß—Ç–æ –º–Ω–µ –¥–µ–ª–∞—Ç—å?",  # –°–æ–≤—Å–µ–º –æ–±—â–∏–π
                "–ö—É–¥–∞ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é?",  # –ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞ –ø–æ–º–æ—â–∏
                "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã?",  # –î–ª—è —á–µ–≥–æ?
                "–°–∫–æ–ª—å–∫–æ —ç—Ç–æ —Å—Ç–æ–∏—Ç?",  # –ß—Ç–æ –∏–º–µ–Ω–Ω–æ?
                "–ö–∞–∫–∏–µ —Å—Ä–æ–∫–∏?",  # –î–ª—è —á–µ–≥–æ?
                "–ö—Ç–æ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å?",  # –ó–∞ —á—Ç–æ?
                "–ú–æ–∂–Ω–æ –ª–∏ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",  # –ß—Ç–æ –∏–º–µ–Ω–Ω–æ?
                "–ó–∞–∫–æ–Ω–Ω–æ –ª–∏ —ç—Ç–æ?",  # –ß—Ç–æ –∏–º–µ–Ω–Ω–æ?
            ],
            
            "specialized_legal": [
                # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
                "–≠—Å—Ç–æ–ø–ø–µ–ª—å –≤ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –ø—Ä–∞–≤–µ",
                "–°—É–±—Å–∏–¥–∏–∞—Ä–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —É—á—Ä–µ–¥–∏—Ç–µ–ª–µ–π",
                "–í–∏–Ω–¥–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∏—Å–∫ –ø—Ä–æ—Ç–∏–≤ –¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—è",
                "–ù–µ–≥–∞—Ç–æ—Ä–Ω—ã–π –∏—Å–∫ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏",
                "–†–µ—Å—Ç–∏—Ç—É—Ü–∏—è –ø—Ä–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏",
                "–¶–µ—Å—Å–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É –ø–æ–¥—Ä—è–¥–∞",
                "–ù–æ–≤–∞—Ü–∏—è –¥–æ–ª–≥–∞ –≤ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–µ–Ω–Ω–æ–º –ø—Ä–∞–≤–µ",
                "–°—É–±—Ä–æ–≥–∞—Ü–∏—è –≤ —Å—Ç—Ä–∞—Ö–æ–≤–æ–º –ø—Ä–∞–≤–µ",
                "–î–µ–ª–∏–∫—Ç–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø—Ä–∏—á–∏–Ω–µ–Ω–∏–µ –≤—Ä–µ–¥–∞",
                "–í–∏–Ω–¥–∏–∫–∞—Ü–∏—è –±–µ–∑–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ä–Ω—ã—Ö —Ü–µ–Ω–Ω—ã—Ö –±—É–º–∞–≥",
            ],
            
            "colloquial_legal": [
                # –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                "–ú–µ–Ω—è –∫–∏–Ω—É–ª–∏ —Å –¥–µ–Ω—å–≥–∞–º–∏, —á—Ç–æ –¥–µ–ª–∞—Ç—å?",
                "–ù–∞—á–∞–ª—å–Ω–∏–∫ –Ω–µ –ø–ª–∞—Ç–∏—Ç –∑–∞—Ä–ø–ª–∞—Ç—É —É–∂–µ –º–µ—Å—è—Ü",
                "–°–æ—Å–µ–¥–∏ —à—É–º—è—Ç –ø–æ –Ω–æ—á–∞–º, –∫–∞–∫ –∏—Ö —É—Ç–∏—Ö–æ–º–∏—Ä–∏—Ç—å?",
                "–†–∞–∑–≤–æ–∂—É—Å—å —Å –º—É–∂–µ–º, –æ–Ω –Ω–µ –¥–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ —Ä–µ–±–µ–Ω–∫–∞",
                "–ö—É–ø–∏–ª —Ç–µ–ª–µ—Ñ–æ–Ω, –∞ –æ–Ω —Å–ª–æ–º–∞–ª—Å—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é",
                "–ú–µ–Ω—è —É–≤–æ–ª–∏–ª–∏ –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è",
                "–ë–∞–Ω–∫ —Å–ø–∏—Å–∞–ª –¥–µ–Ω—å–≥–∏ –±–µ–∑ –º–æ–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è",
                "–í—Ä–∞—á —Å–¥–µ–ª–∞–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é",
                "–ü–æ–ª–∏—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∞–ª–∞ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã",
                "–£–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è –Ω–µ –¥–µ–ª–∞–µ—Ç —Ä–µ–º–æ–Ω—Ç",
            ],
            
            "false_positives": [
                # –í–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –æ—à–∏–±–æ—á–Ω–æ —Å—á–∏—Ç–∞—Ç—å—Å—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏
                "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—É–¥ –ø—Ä–∏—Å—è–∂–Ω—ã—Ö –≤ –∫–∏–Ω–æ?",  # –û –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–µ
                "–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",  # IT-—Ç–µ—Ä–º–∏–Ω
                "–ó–∞—â–∏—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π –æ—Ç –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π",  # –°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ
                "–î–æ–≥–æ–≤–æ—Ä —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
                "–ù–∞–ª–æ–≥–æ–≤–∞—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è –≤ Excel",  # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å
                "–¢—Ä—É–¥–æ–≤–æ–π —Å—Ç–∞–∂ –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –∏–≥—Ä–µ",  # –ò–≥—Ä–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞
                "–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ Windows",  # IT-–ø—Ä–∞–≤–∞
                "–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏",  # –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
                "–ó–∞—â–∏—Ç–∞ –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö –ø—Ä–∞–≤ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ",  # –ú–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º
                "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è —Ñ–∏—Ä–º–∞ –∏—â–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞",  # –í–∞–∫–∞–Ω—Å–∏—è
            ],
            
            "multi_language": [
                # –í–æ–ø—Ä–æ—Å—ã —Å –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–º–∏ —Ç–µ—Ä–º–∏–Ω–∞–º–∏
                "–ß—Ç–æ —Ç–∞–∫–æ–µ habeas corpus?",
                "–ü—Ä–∏–Ω—Ü–∏–ø pacta sunt servanda",
                "–î–æ–∫—Ç—Ä–∏–Ω–∞ res ipsa loquitur",
                "–ü—Ä–∞–≤–∏–ª–æ de minimis non curat lex",
                "–ü—Ä–∏–Ω—Ü–∏–ø ultra vires –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º –ø—Ä–∞–≤–µ",
                "–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç pro bono –≤ —é—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏–∏?",
                "–ö–æ–Ω—Ü–µ–ø—Ü–∏—è force majeure –≤ –¥–æ–≥–æ–≤–æ—Ä–∞—Ö",
                "–ü—Ä–∏–Ω—Ü–∏–ø caveat emptor –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ",
                "–î–æ–∫—Ç—Ä–∏–Ω–∞ respondeat superior",
                "–ü—Ä–∞–≤–∏–ª–æ nemo dat quod non habet",
            ],
            
            "regional_specific": [
                # –í–æ–ø—Ä–æ—Å—ã, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤
                "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–∏—Ä–æ–≤–æ–π —Å—É–¥ –≤ –ú–∏–Ω—Å–∫–µ?",
                "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ò–ü –≤ –ì–æ–º–µ–ª–µ",
                "–ù–∞–ª–æ–≥–æ–≤—ã–µ –ª—å–≥–æ—Ç—ã –≤ –ü–í–¢",
                "–ó–µ–º–µ–ª—å–Ω–æ–µ –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –≤ –ë—Ä–µ—Å—Ç—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",
                "–ñ–∏–ª–∏—â–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –í–∏—Ç–µ–±—Å–∫–µ",
                "–¢—Ä—É–¥–æ–≤–æ–µ –ø—Ä–∞–≤–æ –≤ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö –∑–æ–Ω–∞—Ö",
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–∞–≤–æ –≤ –ú–æ–≥–∏–ª–µ–≤–µ",
                "–°–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ –≤ —Å–µ–ª—å—Å–∫–æ–π –º–µ—Å—Ç–Ω–æ—Å—Ç–∏",
                "–ü—Ä–∞–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞—Ö –†–ë",
                "–≠–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ –ø—Ä–∞–≤–æ –≤ –ì—Ä–æ–¥–Ω–µ–Ω—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",
            ]
        }
    
    def test_ambiguous_cases(self) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ —Å–ª—É—á–∞–∏."""
        print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ï–û–î–ù–û–ó–ù–ê–ß–ù–´–• –°–õ–£–ß–ê–ï–í")
        print("=" * 50)
        
        results = {}
        
        for category, questions in self.complex_test_cases.items():
            print(f"\nüìã {category.upper()}:")
            category_results = {"questions": [], "scores": [], "decisions": []}
            
            for question in questions:
                is_legal, score, explanation = self.question_filter.is_legal_question(question)
                category_results["questions"].append(question)
                category_results["scores"].append(score)
                category_results["decisions"].append(is_legal)
                
                status = "‚úÖ –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ô" if is_legal else "‚ùå –ù–ï –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ô"
                confidence = "–≤—ã—Å–æ–∫–∞—è" if score > 0.3 else "—Å—Ä–µ–¥–Ω—è—è" if score > 0.15 else "–Ω–∏–∑–∫–∞—è"
                
                print(f"  {status} ({score:.3f}, {confidence}): {question}")
                if not is_legal and score > 0.05:
                    print(f"    –ü–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ª—É—á–∞–π: {explanation}")
            
            results[category] = category_results
        
        return results
    
    def analyze_filter_gaps(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏."""
        print("\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–ï–õ–û–í –í –§–ò–õ–¨–¢–†–ê–¶–ò–ò")
        print("=" * 50)
        
        gaps = {
            "missed_legal": [],      # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
            "false_positives": [],   # –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
            "low_confidence": [],    # –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            "ambiguous": []          # –ù–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ —Å–ª—É—á–∞–∏
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        for category, questions in self.complex_test_cases.items():
            for question in questions:
                is_legal, score, explanation = self.question_filter.is_legal_question(question)
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–æ–ª–∂–µ–Ω –ª–∏ –≤–æ–ø—Ä–æ—Å –±—ã—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º
                should_be_legal = self._should_be_legal(question, category)
                
                if should_be_legal and not is_legal:
                    gaps["missed_legal"].append({
                        "question": question,
                        "score": score,
                        "category": category,
                        "explanation": explanation
                    })
                elif not should_be_legal and is_legal:
                    gaps["false_positives"].append({
                        "question": question,
                        "score": score,
                        "category": category,
                        "explanation": explanation
                    })
                elif 0.05 <= score <= 0.15:
                    gaps["low_confidence"].append({
                        "question": question,
                        "score": score,
                        "category": category,
                        "is_legal": is_legal,
                        "explanation": explanation
                    })
                elif category == "ambiguous_questions":
                    gaps["ambiguous"].append({
                        "question": question,
                        "score": score,
                        "is_legal": is_legal,
                        "explanation": explanation
                    })
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        print("\n‚ùå –ü–†–û–ü–£–©–ï–ù–ù–´–ï –Æ–†–ò–î–ò–ß–ï–°–ö–ò–ï –í–û–ü–†–û–°–´:")
        for item in gaps["missed_legal"]:
            print(f"  ‚Ä¢ {item['question']} (–±–∞–ª–ª: {item['score']:.3f})")
            print(f"    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item['category']}")
            print(f"    –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {item['explanation']}")
        
        print("\n‚ö†Ô∏è  –õ–û–ñ–ù–´–ï –°–†–ê–ë–ê–¢–´–í–ê–ù–ò–Ø:")
        for item in gaps["false_positives"]:
            print(f"  ‚Ä¢ {item['question']} (–±–∞–ª–ª: {item['score']:.3f})")
            print(f"    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {item['category']}")
        
        print("\nü§î –ù–ò–ó–ö–ê–Ø –£–í–ï–†–ï–ù–ù–û–°–¢–¨:")
        for item in gaps["low_confidence"]:
            status = "—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π" if item['is_legal'] else "–Ω–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π"
            print(f"  ‚Ä¢ {item['question']} ‚Üí {status} (–±–∞–ª–ª: {item['score']:.3f})")
        
        print("\nüîÑ –ù–ï–û–î–ù–û–ó–ù–ê–ß–ù–´–ï –°–õ–£–ß–ê–ò:")
        for item in gaps["ambiguous"]:
            status = "—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π" if item['is_legal'] else "–Ω–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π"
            print(f"  ‚Ä¢ {item['question']} ‚Üí {status} (–±–∞–ª–ª: {item['score']:.3f})")
        
        return gaps
    
    def _should_be_legal(self, question: str, category: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –¥–æ–ª–∂–µ–Ω –ª–∏ –≤–æ–ø—Ä–æ—Å —Å—á–∏—Ç–∞—Ç—å—Å—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º."""
        # –≠–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if category == "specialized_legal":
            return True
        elif category == "colloquial_legal":
            return True
        elif category == "false_positives":
            return False
        elif category == "regional_specific":
            return True
        elif category == "multi_language":
            return True
        elif category in ["ambiguous_questions", "context_dependent"]:
            # –î–ª—è —ç—Ç–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
            legal_indicators = [
                "–Ω–∞—Å–ª–µ–¥—Å—Ç–≤–æ", "–ø—Ä–∞–≤–∞", "–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "—Ç—Ä—É–¥–æ–≤—ã–µ", "—Å–ø–æ—Ä—ã",
                "–¥–æ–∫—É–º–µ–Ω—Ç—ã", "–∑–∞—â–∏—Ç–∞", "–¥–∞–Ω–Ω—ã—Ö", "–±–∞–Ω–∫–æ–≤—Å–∫–∏–µ", "—Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ"
            ]
            return any(indicator in question.lower() for indicator in legal_indicators)
        
        return False
    
    def suggest_improvements(self, gaps: Dict) -> List[str]:
        """–ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–µ–ª–æ–≤."""
        print("\nüí° –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø –ü–û –£–õ–£–ß–®–ï–ù–ò–Æ:")
        print("=" * 50)
        
        improvements = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        if gaps["missed_legal"]:
            print("\nüîß –î–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:")
            
            # –°–æ–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–µ—Å—è —Ç–µ—Ä–º–∏–Ω—ã
            missed_terms = []
            for item in gaps["missed_legal"]:
                words = item["question"].lower().split()
                missed_terms.extend(words)
            
            # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
            from collections import Counter
            common_terms = Counter(missed_terms).most_common(10)
            
            print("  ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:")
            for term, count in common_terms:
                if len(term) > 3 and term not in ['–∫–∞–∫', '—á—Ç–æ', '–≥–¥–µ', '–¥–ª—è', '—ç—Ç–æ', '–ø—Ä–∏']:
                    print(f"    - '{term}' (–≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è {count} —Ä–∞–∑)")
                    improvements.append(f"–î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: '{term}'")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
        if gaps["false_positives"]:
            print("\n‚ö†Ô∏è  –î–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π:")
            print("  ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∏—Å–∫–ª—é—á–∞—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:")
            
            false_patterns = [
                "–≤ –∫–∏–Ω–æ", "–≤ –∏–≥—Ä–µ", "–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏", "–≤ Excel",
                "–≤ Windows", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä"
            ]
            
            for pattern in false_patterns:
                if any(pattern in item["question"].lower() for item in gaps["false_positives"]):
                    print(f"    - –ò—Å–∫–ª—é—á–∏—Ç—å: '{pattern}'")
                    improvements.append(f"–î–æ–±–∞–≤–∏—Ç—å –∏—Å–∫–ª—é—á–∞—é—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω: '{pattern}'")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª—É—á–∞–∏ —Å –Ω–∏–∑–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
        if gaps["low_confidence"]:
            print("\nüéØ –î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏:")
            print("  ‚Ä¢ –£–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
            print("  ‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞")
            print("  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
            improvements.extend([
                "–£–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
                "–î–æ–±–∞–≤–∏—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞",
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤"
            ])
        
        return improvements
    
    def run_advanced_analysis(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑."""
        print("üöÄ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –§–ò–õ–¨–¢–†–û–í")
        print("=" * 60)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω—ã–µ —Å–ª—É—á–∞–∏
        complex_results = self.test_ambiguous_cases()
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–µ–ª—ã
        gaps = self.analyze_filter_gaps()
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è
        improvements = self.suggest_improvements(gaps)
        
        # –°–≤–æ–¥–∫–∞
        print("\nüìä –°–í–û–î–ö–ê –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê:")
        print("=" * 50)
        
        total_questions = sum(len(questions) for questions in self.complex_test_cases.values())
        missed_count = len(gaps["missed_legal"])
        false_positive_count = len(gaps["false_positives"])
        low_confidence_count = len(gaps["low_confidence"])
        
        print(f"–í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total_questions}")
        print(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö: {missed_count}")
        print(f"–õ–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π: {false_positive_count}")
        print(f"–ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {low_confidence_count}")
        print(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ —É–ª—É—á—à–µ–Ω–∏–π: {len(improvements)}")
        
        accuracy = (total_questions - missed_count - false_positive_count) / total_questions * 100
        print(f"\n–¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö: {accuracy:.1f}%")
        
        return {
            "complex_results": complex_results,
            "gaps": gaps,
            "improvements": improvements,
            "accuracy": accuracy
        }

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        tester = AdvancedFilterTester()
        results = tester.run_advanced_analysis()
        
        print("\n‚úÖ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 