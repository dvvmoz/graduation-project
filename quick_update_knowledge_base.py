#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
"""

import os
import sys
import logging
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from modules.knowledge_base import get_knowledge_base
from scripts.populate_db import populate_from_directory
from scripts.scrape_websites import scrape_multiple_sites, get_legal_sites_list
from scripts.update_documents import update_all_documents

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def show_menu():
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    print("\n" + "="*50)
    print("üîß –ë–´–°–¢–†–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô")
    print("="*50)
    print("1. üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
    print("2. üìÑ –û–±–Ω–æ–≤–∏—Ç—å –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    print("3. üåê –°–∫—Ä–∞–ø–∏—Ç—å —Å–∞–π—Ç—ã")
    print("4. üîÑ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
    print("5. üßπ –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π")
    print("6. üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫")
    print("7. üìà –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞")
    print("0. ‚ùå –í—ã—Ö–æ–¥")
    print("="*50)

def check_knowledge_base_status():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    try:
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
        kb = get_knowledge_base()
        stats = kb.get_collection_stats()
        
        print(f"üìÇ –ü—É—Ç—å –∫ –±–∞–∑–µ: {stats.get('db_path', '–Ω–µ —É–∫–∞–∑–∞–Ω')}")
        print(f"üìö –ö–æ–ª–ª–µ–∫—Ü–∏—è: {stats.get('collection_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}")
        print(f"üìù –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {stats.get('total_documents', 0)}")
        
        if stats.get('total_documents', 0) == 0:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞!")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ó–∞–ø—É—Å—Ç–∏—Ç–µ '–û–±–Ω–æ–≤–∏—Ç—å –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤' –∏–ª–∏ '–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ'")
        elif stats.get('total_documents', 0) < 100:
            print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ú–∞–ª–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∞–ø–∏–Ω–≥")
        else:
            print("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
        return False

def update_from_documents():
    """–û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
    try:
        print("\nüìÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–∫–∏ —Å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
        docs_dir = Path("data/documents")
        if not docs_dir.exists():
            print(f"‚ùå –ü–∞–ø–∫–∞ {docs_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        doc_files = list(docs_dir.glob("*.pdf")) + list(docs_dir.glob("*.docx")) + list(docs_dir.glob("*.doc"))
        
        if not doc_files:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            print("üí° –ü–æ–º–µ—Å—Ç–∏—Ç–µ PDF, DOCX –∏–ª–∏ DOC —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É data/documents/")
            return False
        
        print(f"üìã –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(doc_files)}")
        for doc in doc_files:
            print(f"  - {doc.name}")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        choice = input("\nü§î –û–±–Ω–æ–≤–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –∏–∑ —ç—Ç–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤? (y/n): ").lower()
        if choice != 'y':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        print("\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        stats = update_all_documents()
        
        print(f"\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:")
        print(f"üìù –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {stats.get('processed_files', 0)}")
        print(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ –±–ª–æ–∫–æ–≤: {stats.get('total_blocks', 0)}")
        
        if stats.get('failed_files'):
            print(f"‚ùå –û—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(stats['failed_files'])}")
            for failed_file in stats['failed_files']:
                print(f"  - {failed_file}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {e}")
        return False

def scrape_websites():
    """–°–∫—Ä–∞–ø–∏—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —Å–∞–π—Ç—ã"""
    try:
        print("\nüåê –°–∫—Ä–∞–ø–∏–Ω–≥ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —Å–∞–π—Ç–æ–≤...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤
        sites = get_legal_sites_list()
        if not sites:
            print("‚ùå –°–ø–∏—Å–æ–∫ —Å–∞–π—Ç–æ–≤ –ø—É—Å—Ç")
            return False
        
        print(f"üîó –ù–∞–π–¥–µ–Ω–æ —Å–∞–π—Ç–æ–≤: {len(sites)}")
        for site in sites[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"  - {site}")
        if len(sites) > 5:
            print(f"  ... –∏ –µ—â–µ {len(sites) - 5} —Å–∞–π—Ç–æ–≤")
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        print("\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–∞:")
        max_pages = input("üìÑ –ú–∞–∫—Å–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü —Å –∫–∞–∂–¥–æ–≥–æ —Å–∞–π—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10): ").strip()
        if not max_pages:
            max_pages = 10
        else:
            max_pages = int(max_pages)
        
        max_sites = input("üîó –ú–∞–∫—Å–∏–º—É–º —Å–∞–π—Ç–æ–≤ –¥–ª—è —Å–∫—Ä–∞–ø–∏–Ω–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5): ").strip()
        if not max_sites:
            max_sites = 5
        else:
            max_sites = int(max_sites)
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        choice = input(f"\nü§î –°–∫—Ä–∞–ø–∏—Ç—å {max_sites} —Å–∞–π—Ç–æ–≤ –ø–æ {max_pages} —Å—Ç—Ä–∞–Ω–∏—Ü? (y/n): ").lower()
        if choice != 'y':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∞–ø–∏–Ω–≥
        print("\nüîÑ –°–∫—Ä–∞–ø–∏–Ω–≥ —Å–∞–π—Ç–æ–≤...")
        limited_sites = sites[:max_sites]
        results = scrape_multiple_sites(limited_sites, max_pages)
        
        print(f"\n‚úÖ –°–∫—Ä–∞–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω:")
        print(f"üåê –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–∞–π—Ç–æ–≤: {results.get('sites_processed', 0)}")
        print(f"üìÑ –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {results.get('total_pages', 0)}")
        print(f"üìä –î–æ–±–∞–≤–ª–µ–Ω–æ —á–∞–Ω–∫–æ–≤: {results.get('total_chunks', 0)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ: {e}")
        return False

def full_update():
    """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    try:
        print("\nüîÑ –ü–û–õ–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô")
        print("–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
        
        choice = input("\nü§î –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ? (y/n): ").lower()
        if choice != 'y':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        
        success_count = 0
        
        # 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        print("\nüìÑ –®–∞–≥ 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        if update_from_documents():
            success_count += 1
            print("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # 2. –°–∫—Ä–∞–ø–∏–Ω–≥ —Å–∞–π—Ç–æ–≤
        print("\nüåê –®–∞–≥ 2: –°–∫—Ä–∞–ø–∏–Ω–≥ —Å–∞–π—Ç–æ–≤...")
        if scrape_websites():
            success_count += 1
            print("‚úÖ –°–∞–π—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã")
        else:
            print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫—Ä–∞–ø–∏–Ω–≥–µ —Å–∞–π—Ç–æ–≤")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print("\nüìä –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
        if check_knowledge_base_status():
            success_count += 1
            print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
        print(f"\nüéâ –ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {success_count}/3 —à–∞–≥–æ–≤ —É—Å–ø–µ—à–Ω–æ")
        return success_count >= 2
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        return False

def clear_knowledge_base():
    """–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"""
    try:
        print("\nüßπ –û–ß–ò–°–¢–ö–ê –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô")
        print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        kb = get_knowledge_base()
        stats = kb.get_collection_stats()
        print(f"üìä –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {stats.get('total_documents', 0)}")
        
        # –î–≤–æ–π–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        choice1 = input("\nü§î –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –∑–Ω–∞–Ω–∏–π? (yes/no): ").lower()
        if choice1 != 'yes':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        
        choice2 = input("ü§î –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - –æ—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É? (YES/no): ")
        if choice2 != 'YES':
            print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            return False
        
        # –û—á–∏—â–∞–µ–º –±–∞–∑—É
        print("\nüóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
        if kb.clear_collection():
            print("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ—á–∏—â–µ–Ω–∞")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
        return False

def test_search():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"""
    try:
        print("\nüîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–ò–°–ö–ê")
        
        kb = get_knowledge_base()
        
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        test_queries = [
            "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ò–ü",
            "–Ω–∞–ª–æ–≥–æ–≤—ã–µ –ª—å–≥–æ—Ç—ã",
            "—Ç—Ä—É–¥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
            "–ø–µ–Ω—Å–∏—è",
            "–¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Å—É–¥–∞"
        ]
        
        print("üìã –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã:")
        for i, query in enumerate(test_queries, 1):
            print(f"  {i}. {query}")
        
        choice = input("\nü§î –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å (1-5) –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π: ").strip()
        
        if choice.isdigit() and 1 <= int(choice) <= len(test_queries):
            query = test_queries[int(choice) - 1]
        else:
            query = choice
        
        if not query:
            print("‚ùå –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å")
            return False
        
        print(f"\nüîç –ü–æ–∏—Å–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{query}'")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        results = kb.search_relevant_docs(query, n_results=3)
        
        if not results:
            print("‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(results)}")
        
        for i, doc in enumerate(results, 1):
            print(f"\nüìÑ –î–æ–∫—É–º–µ–Ω—Ç {i}:")
            print(f"  üìä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {doc.get('distance', '–Ω/–¥'):.3f}")
            print(f"  üìÇ –ò—Å—Ç–æ—á–Ω–∏–∫: {doc.get('metadata', {}).get('source_file', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}")
            print(f"  üìù –¢–µ–∫—Å—Ç: {doc.get('content', '')[:200]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞
        should_search, _ = kb.should_use_dynamic_search(query)
        if should_search:
            print("\n‚ö†Ô∏è –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∏–∑–∫–æ–µ, –Ω—É–∂–µ–Ω –ø–æ–∏—Å–∫ –Ω–∞ pravo.by")
        else:
            print("\n‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ö–æ—Ä–æ—à–µ–µ, –Ω–∞–π–¥–µ–Ω—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")
        return False

def analyze_quality():
    """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π"""
    try:
        print("\nüìà –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê –ë–ê–ó–´ –ó–ù–ê–ù–ò–ô")
        
        kb = get_knowledge_base()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        test_queries = [
            "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ò–ü",
            "–Ω–∞–ª–æ–≥–æ–≤—ã–µ –ª—å–≥–æ—Ç—ã", 
            "—Ç—Ä—É–¥–æ–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
            "–ø–µ–Ω—Å–∏—è –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É",
            "—Å–µ–º–µ–π–Ω–æ–µ –ø—Ä–∞–≤–æ",
            "—É–≥–æ–ª–æ–≤–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
            "–¥–æ–≥–æ–≤–æ—Ä –∫—É–ø–ª–∏-–ø—Ä–æ–¥–∞–∂–∏",
            "–ø—Ä–∞–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π"
        ]
        
        print("üîç –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ–∏—Å–∫–∞ –ø–æ —Ç–µ—Å—Ç–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–∞–º...")
        
        total_queries = len(test_queries)
        good_quality = 0
        avg_distances = []
        
        for query in test_queries:
            results = kb.search_relevant_docs(query, n_results=3)
            
            if results:
                avg_distance = sum(doc.get('distance', 1.0) for doc in results) / len(results)
                avg_distances.append(avg_distance)
                
                if avg_distance < 0.5:
                    good_quality += 1
                    quality_status = "‚úÖ –•–æ—Ä–æ—à–µ–µ"
                elif avg_distance < 0.8:
                    quality_status = "‚ö†Ô∏è –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
                else:
                    quality_status = "‚ùå –ù–∏–∑–∫–æ–µ"
                
                print(f"  {query}: {quality_status} ({avg_distance:.3f})")
            else:
                print(f"  {query}: ‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  üìù –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_queries}")
        print(f"  ‚úÖ –•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {good_quality}")
        print(f"  üìà –ü—Ä–æ—Ü–µ–Ω—Ç –∫–∞—á–µ—Å—Ç–≤–∞: {(good_quality / total_queries * 100):.1f}%")
        
        if avg_distances:
            overall_avg = sum(avg_distances) / len(avg_distances)
            print(f"  üìä –°—Ä–µ–¥–Ω—è—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {overall_avg:.3f}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if good_quality / total_queries >= 0.8:
            print("  ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –æ—Ç–ª–∏—á–Ω–æ–µ")
        elif good_quality / total_queries >= 0.6:
            print("  ‚ö†Ô∏è –ö–∞—á–µ—Å—Ç–≤–æ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ")
            print("  üìÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        else:
            print("  ‚ùå –ö–∞—á–µ—Å—Ç–≤–æ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –Ω–∏–∑–∫–æ–µ")
            print("  üîÑ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—á–µ—Å—Ç–≤–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ —á–∞—Ç-–±–æ—Ç–∞")
    print(f"üìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    while True:
        try:
            show_menu()
            choice = input("\nüî¢ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-7): ").strip()
            
            if choice == '0':
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            elif choice == '1':
                check_knowledge_base_status()
            elif choice == '2':
                update_from_documents()
            elif choice == '3':
                scrape_websites()
            elif choice == '4':
                full_update()
            elif choice == '5':
                clear_knowledge_base()
            elif choice == '6':
                test_search()
            elif choice == '7':
                analyze_quality()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            
            # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º
            input("\n‚è∏Ô∏è –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            
        except KeyboardInterrupt:
            print("\n\nüëã –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"\n‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É")

if __name__ == "__main__":
    main() 