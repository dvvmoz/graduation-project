#!/usr/bin/env python3
"""
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤.
"""
import disable_telemetry
import os
import sys
from pathlib import Path

# –û—Ç–∫–ª—é—á–∞–µ–º —Ç–µ–ª–µ–º–µ—Ç—Ä–∏—é ChromaDB
os.environ["ANONYMIZED_TELEMETRY"] = "False"
os.environ["CHROMA_TELEMETRY"] = "False"

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from modules.question_filter import QuestionFilter
from modules.advanced_question_filter import AdvancedQuestionFilter
from typing import List, Dict, Tuple

class FilterComparison:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        self.basic_filter = QuestionFilter()
        self.advanced_filter = AdvancedQuestionFilter()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏ –∏–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.test_cases = [
            # –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏)
            ("–ü—Ä–∞–≤–∞ —á–µ–ª–æ–≤–µ–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", True),
            ("–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –∂–∏–∑–Ω–∏ –∏ –∑–¥–æ—Ä–æ–≤—å—è", True),
            ("–ó–∞—â–∏—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö", True),
            ("–¢—Ä—É–¥–æ–≤—ã–µ —Å–ø–æ—Ä—ã —Å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–º", True),
            ("–ú–µ–Ω—è –∫–∏–Ω—É–ª–∏ —Å –¥–µ–Ω—å–≥–∞–º–∏, —á—Ç–æ –¥–µ–ª–∞—Ç—å?", True),
            ("–ù–∞—á–∞–ª—å–Ω–∏–∫ –Ω–µ –ø–ª–∞—Ç–∏—Ç –∑–∞—Ä–ø–ª–∞—Ç—É —É–∂–µ –º–µ—Å—è—Ü", True),
            ("–°–æ—Å–µ–¥–∏ —à—É–º—è—Ç –ø–æ –Ω–æ—á–∞–º, –∫–∞–∫ –∏—Ö —É—Ç–∏—Ö–æ–º–∏—Ä–∏—Ç—å?", True),
            ("–†–∞–∑–≤–æ–∂—É—Å—å —Å –º—É–∂–µ–º, –æ–Ω –Ω–µ –¥–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ —Ä–µ–±–µ–Ω–∫–∞", True),
            ("–ö—É–ø–∏–ª —Ç–µ–ª–µ—Ñ–æ–Ω, –∞ –æ–Ω —Å–ª–æ–º–∞–ª—Å—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é", True),
            ("–ú–µ–Ω—è —É–≤–æ–ª–∏–ª–∏ –±–µ–∑ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", True),
            ("–ë–∞–Ω–∫ —Å–ø–∏—Å–∞–ª –¥–µ–Ω—å–≥–∏ –±–µ–∑ –º–æ–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è", True),
            ("–í—Ä–∞—á —Å–¥–µ–ª–∞–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é", True),
            ("–ü–æ–ª–∏—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∞–ª–∞ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã", True),
            ("–≠—Å—Ç–æ–ø–ø–µ–ª—å –≤ –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–º –ø—Ä–∞–≤–µ", True),
            ("–°—É–±—Å–∏–¥–∏–∞—Ä–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —É—á—Ä–µ–¥–∏—Ç–µ–ª–µ–π", True),
            ("–í–∏–Ω–¥–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –∏—Å–∫ –ø—Ä–æ—Ç–∏–≤ –¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—Ç–µ–ª—è", True),
            ("–ù–µ–≥–∞—Ç–æ—Ä–Ω—ã–π –∏—Å–∫ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏", True),
            ("–†–µ—Å—Ç–∏—Ç—É—Ü–∏—è –ø—Ä–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏", True),
            ("–ß—Ç–æ —Ç–∞–∫–æ–µ habeas corpus?", True),
            ("–ü—Ä–∏–Ω—Ü–∏–ø pacta sunt servanda", True),
            ("–î–æ–∫—Ç—Ä–∏–Ω–∞ res ipsa loquitur", True),
            ("–ü—Ä–∏–Ω—Ü–∏–ø ultra vires –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º –ø—Ä–∞–≤–µ", True),
            ("–ß—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç pro bono –≤ —é—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏–∏?", True),
            ("–ö–æ–Ω—Ü–µ–ø—Ü–∏—è force majeure –≤ –¥–æ–≥–æ–≤–æ—Ä–∞—Ö", True),
            ("–ü—Ä–∏–Ω—Ü–∏–ø caveat emptor –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ", True),
            
            # –õ–æ–∂–Ω—ã–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (–ù–ï –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏)
            ("–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—É–¥ –ø—Ä–∏—Å—è–∂–Ω—ã—Ö –≤ –∫–∏–Ω–æ?", False),
            ("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", False),
            ("–ó–∞—â–∏—Ç–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π –æ—Ç –≤—Ä–µ–¥–∏—Ç–µ–ª–µ–π", False),
            ("–î–æ–≥–æ–≤–æ—Ä —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", False),
            ("–ù–∞–ª–æ–≥–æ–≤–∞—è –¥–µ–∫–ª–∞—Ä–∞—Ü–∏—è –≤ Excel", False),
            ("–¢—Ä—É–¥–æ–≤–æ–π —Å—Ç–∞–∂ –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –∏–≥—Ä–µ", False),
            ("–ü—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ Windows", False),
            ("–ù–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏", False),
            ("–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è —Ñ–∏—Ä–º–∞ –∏—â–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞", False),
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏)
            ("–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∏—Å–∫ –≤ —Å—É–¥ –≤ –ë–µ–ª–∞—Ä—É—Å–∏?", True),
            ("–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ä–∞–∑–≤–æ–¥–∞ –≤ –†–ë?", True),
            ("–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä –ø–æ –¢–ö –†–ë?", True),
            ("–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ —É –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –≤ –ë–µ–ª–∞—Ä—É—Å–∏?", True),
            ("–ö–∞–∫ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –æ—Ä–≥–∞–Ω–∞?", True),
            
            # –ù–µ—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã (–ù–ï –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–º–∏)
            ("–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â?", False),
            ("–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞?", False),
            ("–ö–∞–∫ –ø–æ—Ö—É–¥–µ—Ç—å –Ω–∞ 10 –∫–≥?", False),
            ("–ì–¥–µ —Å–∫–∞—á–∞—Ç—å —Ñ–∏–ª—å–º?", False),
            ("–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Windows?", False),
        ]
    
    def compare_filters(self) -> Dict:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–∑–æ–≤–æ–≥–æ –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        print("üîç –°–†–ê–í–ù–ï–ù–ò–ï –ë–ê–ó–û–í–û–ì–û –ò –ü–†–û–î–í–ò–ù–£–¢–û–ì–û –§–ò–õ–¨–¢–†–û–í")
        print("=" * 60)
        
        results = {
            "basic": {"correct": 0, "total": 0, "details": []},
            "advanced": {"correct": 0, "total": 0, "details": []},
            "improvements": []
        }
        
        print(f"\n{'–í–æ–ø—Ä–æ—Å':<50} {'–û–∂–∏–¥–∞–µ—Ç—Å—è':<12} {'–ë–∞–∑–æ–≤—ã–π':<15} {'–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π':<15} {'–£–ª—É—á—à–µ–Ω–∏–µ'}")
        print("-" * 100)
        
        for question, expected in self.test_cases:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä
            basic_is_legal, basic_score, basic_explanation = self.basic_filter.is_legal_question(question)
            basic_correct = basic_is_legal == expected
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ñ–∏–ª—å—Ç—Ä
            advanced_is_legal, advanced_score, advanced_explanation = self.advanced_filter.is_legal_question(question)
            advanced_correct = advanced_is_legal == expected
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            results["basic"]["total"] += 1
            results["advanced"]["total"] += 1
            
            if basic_correct:
                results["basic"]["correct"] += 1
            if advanced_correct:
                results["advanced"]["correct"] += 1
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
            results["basic"]["details"].append({
                "question": question,
                "expected": expected,
                "predicted": basic_is_legal,
                "correct": basic_correct,
                "score": basic_score,
                "explanation": basic_explanation
            })
            
            results["advanced"]["details"].append({
                "question": question,
                "expected": expected,
                "predicted": advanced_is_legal,
                "correct": advanced_correct,
                "score": advanced_score,
                "explanation": advanced_explanation
            })
            
            # –û—Ç–º–µ—á–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è
            improved = ""
            if not basic_correct and advanced_correct:
                improved = "‚úÖ –£–õ–£–ß–®–ï–ù–û"
                results["improvements"].append(question)
            elif basic_correct and not advanced_correct:
                improved = "‚ùå –£–•–£–î–®–ï–ù–û"
            elif basic_correct and advanced_correct:
                improved = "‚úì –û–ö"
            else:
                improved = "‚ùå –û–ë–ê –ù–ï–í–ï–†–ù–û"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
            expected_str = "–Æ–†" if expected else "–ù–ï –Æ–†"
            basic_str = f"{'–Æ–†' if basic_is_legal else '–ù–ï –Æ–†'} ({basic_score:.3f})"
            advanced_str = f"{'–Æ–†' if advanced_is_legal else '–ù–ï –Æ–†'} ({advanced_score:.3f})"
            
            print(f"{question[:48]:<50} {expected_str:<12} {basic_str:<15} {advanced_str:<15} {improved}")
        
        return results
    
    def print_summary(self, results: Dict):
        """–í—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–∫—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
        print("\nüìä –°–í–û–î–ö–ê –°–†–ê–í–ù–ï–ù–ò–Ø")
        print("=" * 50)
        
        basic_accuracy = results["basic"]["correct"] / results["basic"]["total"] * 100
        advanced_accuracy = results["advanced"]["correct"] / results["advanced"]["total"] * 100
        improvement = advanced_accuracy - basic_accuracy
        
        print(f"–ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä:")
        print(f"  –¢–æ—á–Ω–æ—Å—Ç—å: {basic_accuracy:.1f}% ({results['basic']['correct']}/{results['basic']['total']})")
        
        print(f"\n–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ñ–∏–ª—å—Ç—Ä:")
        print(f"  –¢–æ—á–Ω–æ—Å—Ç—å: {advanced_accuracy:.1f}% ({results['advanced']['correct']}/{results['advanced']['total']})")
        
        print(f"\n–£–ª—É—á—à–µ–Ω–∏–µ: {improvement:+.1f}%")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤: {len(results['improvements'])}")
        
        if results["improvements"]:
            print("\n‚úÖ –£–õ–£–ß–®–ï–ù–ù–´–ï –°–õ–£–ß–ê–ò:")
            for question in results["improvements"]:
                print(f"  ‚Ä¢ {question}")
        
        # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫
        print("\nüîç –ê–ù–ê–õ–ò–ó –û–®–ò–ë–û–ö:")
        
        basic_errors = [item for item in results["basic"]["details"] if not item["correct"]]
        advanced_errors = [item for item in results["advanced"]["details"] if not item["correct"]]
        
        print(f"\n–û—à–∏–±–∫–∏ –±–∞–∑–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞: {len(basic_errors)}")
        for error in basic_errors[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"  ‚Ä¢ {error['question'][:50]}... (–æ–∂–∏–¥–∞–ª–æ—Å—å: {'–Æ–†' if error['expected'] else '–ù–ï –Æ–†'}, –ø–æ–ª—É—á–µ–Ω–æ: {'–Æ–†' if error['predicted'] else '–ù–ï –Æ–†'})")
        
        print(f"\n–û—à–∏–±–∫–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞: {len(advanced_errors)}")
        for error in advanced_errors[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"  ‚Ä¢ {error['question'][:50]}... (–æ–∂–∏–¥–∞–ª–æ—Å—å: {'–Æ–†' if error['expected'] else '–ù–ï –Æ–†'}, –ø–æ–ª—É—á–µ–Ω–æ: {'–Æ–†' if error['predicted'] else '–ù–ï –Æ–†'})")
    
    def analyze_score_distribution(self, results: Dict):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤."""
        print("\nüìà –ê–ù–ê–õ–ò–ó –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ë–ê–õ–õ–û–í")
        print("=" * 50)
        
        basic_scores = [item["score"] for item in results["basic"]["details"]]
        advanced_scores = [item["score"] for item in results["advanced"]["details"]]
        
        print(f"–ë–∞–∑–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä:")
        print(f"  –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {sum(basic_scores) / len(basic_scores):.3f}")
        print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: {min(basic_scores):.3f}")
        print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: {max(basic_scores):.3f}")
        
        print(f"\n–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ñ–∏–ª—å—Ç—Ä:")
        print(f"  –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {sum(advanced_scores) / len(advanced_scores):.3f}")
        print(f"  –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π: {min(advanced_scores):.3f}")
        print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π: {max(advanced_scores):.3f}")
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        legal_questions = [item for item in results["advanced"]["details"] if item["expected"]]
        non_legal_questions = [item for item in results["advanced"]["details"] if not item["expected"]]
        
        if legal_questions:
            legal_scores = [item["score"] for item in legal_questions]
            print(f"\n–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π):")
            print(f"  –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {sum(legal_scores) / len(legal_scores):.3f}")
            print(f"  –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {sum(1 for item in legal_questions if item['predicted'])}/{len(legal_questions)}")
        
        if non_legal_questions:
            non_legal_scores = [item["score"] for item in non_legal_questions]
            print(f"\n–ù–µ—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã (–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π):")
            print(f"  –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {sum(non_legal_scores) / len(non_legal_scores):.3f}")
            print(f"  –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {sum(1 for item in non_legal_questions if not item['predicted'])}/{len(non_legal_questions)}")
    
    def run_comparison(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
        print("üöÄ –ü–û–õ–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –§–ò–õ–¨–¢–†–û–í")
        print("=" * 60)
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        results = self.compare_filters()
        
        # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
        self.print_summary(results)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤
        self.analyze_score_distribution(results)
        
        return results

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."""
    try:
        comparison = FilterComparison()
        results = comparison.run_comparison()
        
        print("\n‚úÖ –°–†–ê–í–ù–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        basic_accuracy = results["basic"]["correct"] / results["basic"]["total"] * 100
        advanced_accuracy = results["advanced"]["correct"] / results["advanced"]["total"] * 100
        
        if advanced_accuracy > basic_accuracy:
            print(f"\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ñ–∏–ª—å—Ç—Ä")
            print(f"   –£–ª—É—á—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏: {advanced_accuracy - basic_accuracy:+.1f}%")
        else:
            print(f"\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ñ–∏–ª—å—Ç—Ä –Ω–µ –ø–æ–∫–∞–∑–∞–ª —É–ª—É—á—à–µ–Ω–∏–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 