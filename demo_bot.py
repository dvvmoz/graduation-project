#!/usr/bin/env python3
"""
–î–µ–º–æ-–≤–µ—Ä—Å–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö API –∫–ª—é—á–µ–π.
"""
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from modules.knowledge_base import search_relevant_docs, get_knowledge_base

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class DemoLegalAssistant:
    """–î–µ–º–æ-–≤–µ—Ä—Å–∏—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –±–µ–∑ OpenAI."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–µ–º–æ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞."""
        self.knowledge_base = get_knowledge_base()
        logger.info("–î–µ–º–æ-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_demo_answer(self, user_question: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ-–æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.
        
        Args:
            user_question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –î–µ–º–æ-–æ—Ç–≤–µ—Ç
        """
        try:
            # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
            relevant_docs = search_relevant_docs(user_question, n_results=3)
            
            if not relevant_docs:
                return self._get_no_info_response()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç
            response = self._format_demo_response(user_question, relevant_docs)
            return response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç–∞: {e}")
            return self._get_error_response()
    
    def _format_demo_response(self, question: str, docs: list) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ–º–æ-–æ—Ç–≤–µ—Ç."""
        # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
        short_docs = []
        for doc in docs[:2]:  # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 –¥–æ–∫—É–º–µ–Ω—Ç–∞
            if len(doc) > 150:
                short_doc = doc[:150] + "..."
            else:
                short_doc = doc
            short_docs.append(short_doc)
        
        response = f"""
üìã **–î–µ–º–æ-–æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:** "{question}"

üîç **–ù–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π:**

{chr(10).join([f"‚Ä¢ {doc}" for doc in short_docs])}

üìù **–î–µ–º–æ-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
1. –ò–∑—É—á–∏—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤—ã—à–µ
2. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º —Å—Ç–∞—Ç—å—è–º –∑–∞–∫–æ–Ω–∞
3. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å —é—Ä–∏—Å—Ç–æ–º

‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ò–ò –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ OpenAI API –∫–ª—é—á –≤ —Ñ–∞–π–ª–µ .env

üìö **–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç:** {self.knowledge_base.get_collection_stats().get('total_documents', 0)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
"""
        return response
    
    def _get_no_info_response(self) -> str:
        """–û—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."""
        return """
üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π.

**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**
‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å
‚Ä¢ –ó–∞–¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ PDF –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–ø–∫—É data/

‚ö†Ô∏è **–≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è** - –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ API –∫–ª—é—á–∏.
"""
    
    def _get_error_response(self) -> str:
        """–û—Ç–≤–µ—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
        return """
üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.

‚ö†Ô∏è **–≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è** - –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ OpenAI API –∫–ª—é—á.
"""

def interactive_demo():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ-—Å–µ—Å—Å–∏—è."""
    print("=" * 60)
    print("ü§ñ –î–ï–ú–û-–í–ï–†–°–ò–Ø –Æ–†–ò–î–ò–ß–ï–°–ö–û–ì–û –ê–°–°–ò–°–¢–ï–ù–¢–ê")
    print("=" * 60)
    
    try:
        assistant = DemoLegalAssistant()
        kb_stats = assistant.knowledge_base.get_collection_stats()
        print(f"üìö –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç: {kb_stats.get('total_documents', 0)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        print("üí° –≠—Ç–æ –¥–µ–º–æ –±–µ–∑ –ò–ò - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π")
        print("\n" + "=" * 60)
        
        example_questions = [
            "–Ω–∞–ª–æ–≥–∏",
            "–¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
            "–ø—Ä–∞–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è",
            "—Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä"
        ]
        
        print("üìù –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:")
        for i, q in enumerate(example_questions, 1):
            print(f"  {i}. {q}")
        
        print("\n" + "=" * 60)
        print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ '–≤—ã—Ö–æ–¥' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è):")
        
        while True:
            question = input("\n‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å: ").strip()
            
            if question.lower() in ['–≤—ã—Ö–æ–¥', 'exit', 'quit', 'q']:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            if not question:
                print("‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å")
                continue
            
            print("\nüîç –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π...")
            answer = assistant.get_demo_answer(question)
            print(answer)
            print("\n" + "-" * 60)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_search_functionality():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞."""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–ò –ü–û–ò–°–ö–ê")
    print("=" * 60)
    
    try:
        assistant = DemoLegalAssistant()
        
        test_queries = [
            "–Ω–∞–ª–æ–≥",
            "–¥–æ–∫—É–º–µ–Ω—Ç—ã",
            "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
            "–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π_—Ç–µ—Ä–º–∏–Ω_12345"
        ]
        
        for query in test_queries:
            print(f"\nüîç –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞: '{query}'")
            docs = search_relevant_docs(query, n_results=2)
            if docs:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(docs)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                for i, doc in enumerate(docs, 1):
                    preview = doc[:100] + "..." if len(doc) > 100 else doc
                    print(f"  {i}. {preview}")
            else:
                print("‚ùå –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ."""
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–≥–æ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...\n")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    try:
        kb = get_knowledge_base()
        stats = kb.get_collection_stats()
        if stats.get('total_documents', 0) == 0:
            print("‚ùå –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –ø—É—Å—Ç–∞!")
            print("üìù –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞: python scripts/populate_db.py")
            return
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: {e}")
        return
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("1. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è")
    print("2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞")
    print("3. –û–±–∞ —Ä–µ–∂–∏–º–∞")
    
    choice = input("\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()
    
    if choice == "1":
        interactive_demo()
    elif choice == "2":
        test_search_functionality()
    elif choice == "3":
        test_search_functionality()
        interactive_demo()
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...")
        interactive_demo()

if __name__ == "__main__":
    main() 