#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML-—Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from modules.ml_question_filter import MLQuestionFilter, is_legal_question_ml

def test_ml_filter():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ML-—Ñ–∏–ª—å—Ç—Ä –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö."""
    print("ü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ML-–§–ò–õ–¨–¢–†–ê")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        # –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        ("–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∏—Å–∫ –≤ —Å—É–¥?", True),
        ("–ú–µ–Ω—è –∫–∏–Ω—É–ª–∏ —Å –¥–µ–Ω—å–≥–∞–º–∏", True),
        ("–≠—Å—Ç–æ–ø–ø–µ–ª—å –≤ –ø—Ä–∞–≤–µ", True),
        ("Habeas corpus —á—Ç–æ —ç—Ç–æ?", True),
        ("–ü—Ä–∞–≤–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è", True),
        
        # –ù–µ—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        ("–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â?", False),
        ("–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –∑–∞–≤—Ç—Ä–∞?", False),
        ("–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Windows?", False),
        ("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", False),
        ("–°—É–¥ –ø—Ä–∏—Å—è–∂–Ω—ã—Ö –≤ –∫–∏–Ω–æ", False),
    ]
    
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML-—Ñ–∏–ª—å—Ç—Ä–∞...")
    try:
        ml_filter = MLQuestionFilter()
        print("‚úÖ ML-—Ñ–∏–ª—å—Ç—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return
    
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö:")
    print("-" * 50)
    
    correct = 0
    total = len(test_cases)
    
    for question, expected in test_cases:
        try:
            is_legal, confidence, explanation = ml_filter.is_legal_question(question)
            
            result = "‚úÖ" if is_legal == expected else "‚ùå"
            status = "–Æ–†" if is_legal else "–ù–ï –Æ–†"
            expected_status = "–Æ–†" if expected else "–ù–ï –Æ–†"
            
            print(f"{result} {question[:40]:40} | –û–∂–∏–¥–∞–ª–æ—Å—å: {expected_status:6} | –ü–æ–ª—É—á–µ–Ω–æ: {status:6} | –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.3f}")
            
            if is_legal == expected:
                correct += 1
                
        except Exception as e:
            print(f"‚ùå {question[:40]:40} | –û–®–ò–ë–ö–ê: {e}")
    
    accuracy = correct / total * 100
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}/{total}")
    print(f"–¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%")
    
    if accuracy >= 90:
        print("üéâ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
    elif accuracy >= 80:
        print("üëç –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!")
    else:
        print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ")

if __name__ == "__main__":
    test_ml_filter() 