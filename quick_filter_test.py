#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Ö —Ä–∞–±–æ—Ç—ã.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_filters():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    print("üîç –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –§–ò–õ–¨–¢–†–û–í")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    test_questions = [
        ("–ö–∞–∫ –ø–æ–¥–∞—Ç—å –∏—Å–∫ –≤ —Å—É–¥?", True, "—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π"),
        ("–ú–µ–Ω—è –∫–∏–Ω—É–ª–∏ —Å –¥–µ–Ω—å–≥–∞–º–∏", True, "—Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π"),
        ("–ß—Ç–æ —Ç–∞–∫–æ–µ —ç—Å—Ç–æ–ø–ø–µ–ª—å?", True, "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Ä–º–∏–Ω"),
        ("–ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –±–æ—Ä—â?", False, "–Ω–µ—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π"),
        ("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", False, "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Ç–µ—Ä–º–∏–Ω"),
    ]
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∏–ª—å—Ç—Ä
    filters_to_test = [
        ("–ë–∞–∑–æ–≤—ã–π", "modules.question_filter", "QuestionFilter"),
        ("–£–ª—É—á—à–µ–Ω–Ω—ã–π", "modules.improved_question_filter", "ImprovedQuestionFilter"),
        ("ML", "modules.ml_question_filter", "MLQuestionFilter"),
        ("–ì–∏–±—Ä–∏–¥–Ω—ã–π", "modules.hybrid_question_filter", "HybridQuestionFilter"),
    ]
    
    results = {}
    
    for filter_name, module_name, class_name in filters_to_test:
        print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {filter_name} —Ñ–∏–ª—å—Ç—Ä–∞:")
        print("-" * 30)
        
        try:
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç
            module = __import__(module_name, fromlist=[class_name])
            filter_class = getattr(module, class_name)
            filter_instance = filter_class()
            
            correct = 0
            total = len(test_questions)
            
            for question, expected, category in test_questions:
                try:
                    is_legal, score, explanation = filter_instance.is_legal_question(question)
                    result = "‚úÖ" if is_legal == expected else "‚ùå"
                    status = "–Æ–†" if is_legal else "–ù–ï –Æ–†"
                    expected_status = "–Æ–†" if expected else "–ù–ï –Æ–†"
                    
                    print(f"{result} {question[:30]:30} | {expected_status:6} ‚Üí {status:6} | {score:.3f}")
                    
                    if is_legal == expected:
                        correct += 1
                        
                except Exception as e:
                    print(f"‚ùå {question[:30]:30} | –û–®–ò–ë–ö–ê: {e}")
            
            accuracy = correct / total * 100
            results[filter_name] = accuracy
            print(f"üìà –¢–æ—á–Ω–æ—Å—Ç—å: {correct}/{total} ({accuracy:.1f}%)")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {filter_name} —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
            results[filter_name] = 0
    
    # –ò—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüèÜ –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print("=" * 30)
    
    sorted_results = sorted(results.items(), key=lambda x: x[1], reverse=True)
    
    for i, (name, accuracy) in enumerate(sorted_results):
        medal = ["ü•á", "ü•à", "ü•â", "üèÖ"][min(i, 3)]
        print(f"{medal} {name:12}: {accuracy:5.1f}%")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è
    if sorted_results:
        best_filter = sorted_results[0][0]
        best_accuracy = sorted_results[0][1]
        
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:")
        if best_accuracy >= 90:
            print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {best_filter} —Ñ–∏–ª—å—Ç—Ä ({best_accuracy:.1f}%) –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")
        elif best_accuracy >= 80:
            print(f"üëç {best_filter} —Ñ–∏–ª—å—Ç—Ä ({best_accuracy:.1f}%) –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
        else:
            print(f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤")

if __name__ == "__main__":
    test_filters() 