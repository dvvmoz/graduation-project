version: '3.8'

services:
  legal-bot:
    image: gcr.io/${GCP_PROJECT_ID}/legal-bot:${IMAGE_TAG:-latest}
    container_name: legal-bot-gcp
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_CLOUD_PROJECT=${GCP_PROJECT_ID}
      - GOOGLE_APPLICATION_CREDENTIALS=/var/secrets/google/key.json
      - GCS_BUCKET_NAME=${GCS_BUCKET_NAME}
      - CLOUD_SQL_CONNECTION_NAME=${CLOUD_SQL_CONNECTION_NAME}
      - MEMORYSTORE_ENDPOINT=${MEMORYSTORE_ENDPOINT}
    volumes:
      - ${GOOGLE_APPLICATION_CREDENTIALS}:/var/secrets/google/key.json:ro
    depends_on:
      - redis
    networks:
      - legal-bot-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: gcplogs
      options:
        gcp-project: ${GCP_PROJECT_ID}
        gcp-log-cmd: "true"

  nginx:
    image: nginx:alpine
    container_name: nginx-gcp
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.gcp.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/security:/etc/nginx/security:ro
    depends_on:
      - legal-bot
    networks:
      - legal-bot-network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
    logging:
      driver: gcplogs
      options:
        gcp-project: ${GCP_PROJECT_ID}

  redis:
    image: redis:7-alpine
    container_name: redis-gcp
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - legal-bot-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
    logging:
      driver: gcplogs
      options:
        gcp-project: ${GCP_PROJECT_ID}

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-gcp
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.gcp.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - legal-bot-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: gcplogs
      options:
        gcp-project: ${GCP_PROJECT_ID}

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-gcp
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=${GRAFANA_ROOT_URL}
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=${SMTP_HOST}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
      - GF_SMTP_FROM_ADDRESS=${SMTP_FROM_ADDRESS}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - legal-bot-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
    logging:
      driver: gcplogs
      options:
        gcp-project: ${GCP_PROJECT_ID}

networks:
  legal-bot-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local 