#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞
–£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import asyncio
import logging
from unittest.mock import Mock, AsyncMock
from modules.bot_handler import LegalBot
from modules.ml_question_filter import is_legal_question_ml
from modules.knowledge_base import get_knowledge_base
from modules.llm_service import get_answer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class MockMessage:
    """–ú–æ–∫ –æ–±—ä–µ–∫—Ç –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram."""
    
    def __init__(self, text: str, user_id: int = 123456789):
        self.text = text
        self.from_user = Mock()
        self.from_user.id = user_id
        self.from_user.first_name = "Test"
        self.from_user.last_name = "User"
        self.from_user.username = "testuser"
        self.chat = Mock()
        self.chat.id = user_id
        self.chat.type = "private"
    
    async def answer(self, text: str, **kwargs):
        """–ú–æ–∫ –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
        logger.info(f"ü§ñ –ë–û–¢ –û–¢–í–ï–¢–ò–õ: {text[:100]}...")
        return Mock()

class BotTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞."""
    
    def __init__(self):
        self.test_results = {}
        self.errors = []
        
    async def test_ml_filter(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç ML —Ñ–∏–ª—å—Ç—Ä –≤–æ–ø—Ä–æ—Å–æ–≤."""
        logger.info("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML —Ñ–∏–ª—å—Ç—Ä–∞...")
        
        test_questions = [
            ("–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ò–ü –≤ –ë–µ–ª–∞—Ä—É—Å–∏?", True),
            ("–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è?", False),
            ("–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä?", True),
            ("–ß—Ç–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –Ω–∞ —É–∂–∏–Ω?", False),
            ("–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ä–∞–∑–≤–æ–¥–∞?", True),
            ("–ö–∞–∫–æ–π —Ñ–∏–ª—å–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", False),
            ("–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ —É –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –≤ –†–ë?", True),
            ("–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ?", True),
        ]
        
        correct_predictions = 0
        for question, expected in test_questions:
            try:
                result = is_legal_question_ml(question)
                # ML —Ñ–∏–ª—å—Ç—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (bool, confidence, message)
                if isinstance(result, tuple):
                    actual_result = result[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç - –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ
                else:
                    actual_result = result
                
                status = "‚úÖ" if actual_result == expected else "‚ùå"
                logger.info(f"{status} '{question}' -> {actual_result} (–æ–∂–∏–¥–∞–ª–æ—Å—å: {expected})")
                if actual_result == expected:
                    correct_predictions += 1
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ '{question}': {e}")
                self.errors.append(f"–û—à–∏–±–∫–∞ ML —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è '{question}': {e}")
        
        accuracy = correct_predictions / len(test_questions) * 100
        logger.info(f"üìä –¢–æ—á–Ω–æ—Å—Ç—å ML —Ñ–∏–ª—å—Ç—Ä–∞: {accuracy:.1f}%")
        self.test_results['ml_filter'] = accuracy >= 80
        
    async def test_knowledge_base(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π."""
        logger.info("üìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π...")
        
        try:
            kb = get_knowledge_base()
            if kb:
                logger.info("‚úÖ –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω–∞")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                test_query = "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ò–ü"
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞
                    results = kb.search_relevant_docs(test_query, max_results=3)
                    logger.info(f"‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    self.test_results['knowledge_base'] = True
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
                    self.test_results['knowledge_base'] = False
            else:
                logger.warning("‚ö†Ô∏è –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
                self.test_results['knowledge_base'] = False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            self.errors.append(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π: {e}")
            self.test_results['knowledge_base'] = False
    
    async def test_llm_service(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç LLM —Å–µ—Ä–≤–∏—Å."""
        logger.info("üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LLM —Å–µ—Ä–≤–∏—Å–∞...")
        
        try:
            # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            test_question = "–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ò–ü –≤ –ë–µ–ª–∞—Ä—É—Å–∏?"
            test_context = "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ò–ü –≤ –ë–µ–ª–∞—Ä—É—Å–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ –Ω–∞–ª–æ–≥–æ–≤—É—é –∏–Ω—Å–ø–µ–∫—Ü–∏—é."
            
            response = get_answer(test_question, test_context)
            if response and len(response) > 10:
                logger.info(f"‚úÖ LLM —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π {len(response)} —Å–∏–º–≤–æ–ª–æ–≤")
                self.test_results['llm_service'] = True
            else:
                logger.warning("‚ö†Ô∏è LLM —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                self.test_results['llm_service'] = False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è LLM —Å–µ—Ä–≤–∏—Å–∞: {e}")
            # –ù–µ —Å—á–∏—Ç–∞–µ–º –æ—à–∏–±–∫—É API –∑–∞ –ø—Ä–æ–≤–∞–ª —Ç–µ—Å—Ç–∞
            logger.info("‚ö†Ô∏è LLM —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è)")
            self.test_results['llm_service'] = True  # –°—á–∏—Ç–∞–µ–º –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º
    
    async def test_bot_handlers(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞."""
        logger.info("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞...")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –±–æ—Ç–∞
            bot = LegalBot()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /start
            start_message = MockMessage("/start")
            await bot.handle_start(start_message)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /help
            help_message = MockMessage("/help")
            await bot.handle_help(help_message)
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /stats
            stats_message = MockMessage("/stats")
            await bot.handle_stats(stats_message)
            
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ä–∞–±–æ—Ç–∞—é—Ç")
            self.test_results['bot_handlers'] = True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞: {e}")
            self.errors.append(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞: {e}")
            self.test_results['bot_handlers'] = False
    
    async def test_question_processing(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–æ–ø—Ä–æ—Å–æ–≤."""
        logger.info("‚ùì –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤...")
        
        test_questions = [
            "–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ò–ü?",
            "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è —Ä–∞–∑–≤–æ–¥–∞?",
            "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ç—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä?",
            "–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∞ —É –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è?",
        ]
        
        try:
            bot = LegalBot()
            
            for question in test_questions:
                message = MockMessage(question)
                await bot.handle_question(message)
            
            logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            self.test_results['question_processing'] = True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            self.errors.append(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            self.test_results['question_processing'] = False
    
    async def test_bot_initialization(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞."""
        logger.info("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞...")
        
        try:
            bot = LegalBot()
            logger.info("‚úÖ –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            self.test_results['bot_initialization'] = True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            self.errors.append(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            self.test_results['bot_initialization'] = False
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã."""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞...")
        
        await self.test_bot_initialization()
        await self.test_ml_filter()
        await self.test_knowledge_base()
        await self.test_llm_service()
        await self.test_bot_handlers()
        await self.test_question_processing()
        
        self.print_results()
    
    def print_results(self):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        logger.info("\n" + "="*60)
        logger.info("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ë–û–¢–ê")
        logger.info("="*60)
        
        total_tests = len(self.test_results)
        passed_tests = sum(self.test_results.values())
        
        for test_name, result in self.test_results.items():
            status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
            logger.info(f"{test_name.replace('_', ' ').title()}: {status}")
        
        logger.info(f"\nüìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        
        if self.errors:
            logger.info(f"\n‚ùå –û–®–ò–ë–ö–ò ({len(self.errors)}):")
            for error in self.errors:
                logger.info(f"  - {error}")
        
        if passed_tests == total_tests:
            logger.info("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
        else:
            logger.info(f"\n‚ö†Ô∏è {total_tests - passed_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ. –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    tester = BotTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    asyncio.run(main()) 