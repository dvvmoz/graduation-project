version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.9
      docker: 20
    commands:
      - echo Installing dependencies...
      - pip install --upgrade pip
      - pip install -r requirements.txt
      - pip install pytest pytest-cov pytest-asyncio bandit

  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
      - echo Setting up test environment...
      - |
        cat > .env.test << EOF
        ENVIRONMENT=test
        REDIS_URL=redis://localhost:6379
        DATABASE_URL=postgresql://postgres:postgres@localhost:5432/legal_bot_test
        JWT_SECRET=test_secret_key_for_testing_only
        OPENAI_API_KEY=$OPENAI_API_KEY
        EOF

  build:
    commands:
      - echo Starting Redis for tests...
      - redis-server --daemonize yes
      - echo Starting PostgreSQL for tests...
      - |
        docker run --name postgres-test -e POSTGRES_PASSWORD=postgres -e POSTGRES_DB=legal_bot_test -p 5432:5432 -d postgres:15-alpine
        sleep 10
      - echo Running tests...
      - pytest tests/ -v --cov=app --cov-report=xml --cov-report=html
      - echo Running security scan...
      - bandit -r app/ -f json -o bandit-report.json || true
      - echo Building Docker image...
      - docker build -f Dockerfile.prod -t $REPOSITORY_URI:latest .
      - docker build -f Dockerfile.prod -t $REPOSITORY_URI:$IMAGE_TAG .
      - echo Building backup image...
      - docker build -f Dockerfile.backup -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/legal-bot-backup:latest .
      - docker build -f Dockerfile.backup -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/legal-bot-backup:$IMAGE_TAG .

  post_build:
    commands:
      - echo Pushing Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/legal-bot-backup:latest
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/legal-bot-backup:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"legal-bot","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json

artifacts:
  files:
    - imagedefinitions.json
    - coverage.xml
    - bandit-report.json
  name: legal-bot-build-artifacts

cache:
  paths:
    - '/root/.cache/pip/**/*' 